(mod (OPERATIONS MOD_HASH STATUTES_STRUCT LAUNCHER_ID INNER_PUZZLE_HASH APPROVED DEPOSIT DELAY ATOM_VALUE MIN_DEPOSIT COOLDOWN_START LAST_PENALTY_INTERVAL TIMESTAMP_EXPIRES
     (@ lineage (parent_id prev_deposit prev_puzzle_args_hash))
     inner_puzzle
     solution_or_conditions
  )

  (include condition_codes.clib)
  (include curry.clib)
  (include *standard-cl-23*)
  (include utils.clib)
  (include statutes_utils.clib)

  (defconst ANN_PREFIX 'A') ; TODO: delete as not used anywhere?

  (defun-inline is-valid-msg-cond (cond_body)
  ; TODO: sufficient to check that it's not a protocol message
    (not
      (and
        (> (strlen (f (r cond_body))) 2)
        (= (substr (f (r cond_body)) 0 3) PROTOCOL_PREFIX)
      )
    )
  )

  (defun restrict-conditions ((@ conditions ((condition_code . condition_body) . rest_of_conditions))
                              found_create_coin final_conditions)
    ; RETURNS (conditions create_coin_condition)
    (if conditions
      (if (= condition_code CREATE_COIN)
        (if found_create_coin
          (x) ; at most one CREATE_COIN condition allowed
          (restrict-conditions rest_of_conditions condition_body final_conditions)
        )
        (if (any (= condition_code SEND_MESSAGE) (= condition_code RECEIVE_MESSAGE))
          (if (is-valid-msg-cond condition_body)
            (restrict-conditions rest_of_conditions found_create_coin (c (f conditions) final_conditions))
            (x)
          )
          (if (= condition_code CREATE_PUZZLE_ANNOUNCEMENT)
            (x)
            (restrict-conditions rest_of_conditions found_create_coin (c (f conditions) final_conditions))
          )
        )
      )
      (list final_conditions found_create_coin)
    )
  )

  (assign
    inner_puzzle_hash (if inner_puzzle (sha256tree inner_puzzle) ())
    raw_conditions (if inner_puzzle_hash
      (assert (= inner_puzzle_hash INNER_PUZZLE_HASH)
        (a inner_puzzle solution_or_conditions)
      )
      ; otherwise, solution_or_conditions is conditions
      solution_or_conditions
    )

    (input_conditions (new_puzzle_hash deposit (operation . args)))
      (if raw_conditions
        (restrict-conditions raw_conditions () ())
        (list () (list INNER_PUZZLE_HASH DEPOSIT (list 0 0)))
      )
    (assert
      (any inner_puzzle_hash (all (not inner_puzzle_hash) (= new_puzzle_hash INNER_PUZZLE_HASH)))
      (contains OPERATIONS (sha256tree operation))
      (c
        ; ensuring that parent was indeed spent with our puzzle and pubkey
        (if lineage
          (assert
            (size_b32 prev_puzzle_args_hash)
            (list ASSERT_MY_PARENT_ID
              (calculate-coin-id
                parent_id
                (tree_hash_of_apply MOD_HASH prev_puzzle_args_hash)
                prev_deposit
              )
            )
          )
          ; launch
          (assert
            (= DEPOSIT 0)
            (= DELAY 0)
            (= COOLDOWN_START 0)
            (= APPROVED 0)
            (= ATOM_VALUE 0)
            (= TIMESTAMP_EXPIRES 0)
            (= LAST_PENALTY_INTERVAL 0)
            (list ASSERT_MY_PARENT_ID LAUNCHER_ID)
          )
        )
        (c
          (list ASSERT_MY_AMOUNT DEPOSIT) ; always check that DEPOSIT is correct
          (a
            operation
            (list
              (list MOD_HASH STATUTES_STRUCT LAUNCHER_ID INNER_PUZZLE_HASH APPROVED DEPOSIT DELAY ATOM_VALUE MIN_DEPOSIT COOLDOWN_START LAST_PENALTY_INTERVAL TIMESTAMP_EXPIRES)
              inner_puzzle_hash new_puzzle_hash deposit input_conditions
              args
            )
          )
        )
      )
    )
  )
)
