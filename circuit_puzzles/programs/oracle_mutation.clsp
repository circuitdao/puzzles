(mod (ATOM_ANNOUNCER_MOD_HASH
      MOD_HASH
      STATUTES_STRUCT
      PRICE_INFOS
      (@ oracle_mutation
        (
          statutes_inner_puzzle_hash
          m_of_n
          price_updatable_after_seconds
          price_updatable_threshold_bps
          price_delay
          current_timestamp
          price_announcers ; -> ((launcher_id args_hash price))
        )
      )
      input_conditions
      )

  (include *standard-cl-23.1*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include utils.clib)
  (include oracle.clib)

  (assign
    statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
    ; number of announcers being used in oracle price update
    price_announcers_length (list-length price_announcers 0)
    ; extract and sort announcer prices in ascending order
    sorted_prices (mergesort price_announcers)
    ; get (upper) median price
    median_price (f (r (r (get-price sorted_prices (get-median-index price_announcers_length) 0))))
    announcer_conditions (generate-announcer-conditions
      STATUTES_STRUCT
      ATOM_ANNOUNCER_MOD_HASH
      price_announcers
    )
    ; discard matured price infos other than most recent one, if any
    (last_matured_price_info . cut_price_infos) (cut-price-infos PRICE_INFOS (- current_timestamp price_delay) ())
    ; append new price info to the end of the buffer (FILO)
    new_price_infos (merge-lists
        cut_price_infos
        (list (c median_price current_timestamp))
    )
    (last_matured_price . last_matured_price_updated) (if last_matured_price_info last_matured_price_info (c () ()))
    ; most recent price info in existing buffer, i.e. excluding new price info being appended
    (last_price . last_price_updated) (last-item PRICE_INFOS)
    (assert
      ; oracle price update requires at least M-of-N announcers
      (> price_announcers_length (- m_of_n ONE))
      ; check that no announcer is being used more than once
      (unique price_announcers)
      ; oracle price must be greater than 0
      (> median_price 0)
      ; price info timestamps must increase strictly
      (> current_timestamp last_price_updated)
      ; oracle price update only allowed if enough time has passed or price change sufficiently large
      (any
        (> (- current_timestamp last_price_updated) price_updatable_after_seconds)
        (> (abs (/ (* (- last_price median_price) PRECISION_BPS) last_price) ) price_updatable_threshold_bps)
      )
      (li
        ; ensure current timestamp is in range last_block > current_timestamp - 1 block < next block
        (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp MAX_TX_BLOCK_TIME ))
        (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp MAX_TX_BLOCK_TIME))
        (assert-statute statutes_puzzle_hash STATUTE_ORACLE_M_OF_N m_of_n)
        (assert-statute statutes_puzzle_hash STATUTE_ORACLE_PRICE_UPDATE_DELAY price_updatable_after_seconds)
        (assert-statute statutes_puzzle_hash STATUTE_ORACLE_PRICE_UPDATE_DELTA_BPS price_updatable_threshold_bps)
        (assert-statute statutes_puzzle_hash STATUTE_PRICE_DELAY price_delay)
        (if last_matured_price
          (list CREATE_PUZZLE_ANNOUNCEMENT
            (sha256tree (c last_matured_price (c last_matured_price_updated (c current_timestamp price_delay))))
          )
          (list REMARK)
        )
        (list
          CREATE_COIN
          (curry_hashes MOD_HASH
            (sha256 ONE MOD_HASH)
            (sha256tree STATUTES_STRUCT)
            (sha256tree new_price_infos)
          )
          ; min singleton amount, force it to be ONE
          ONE
        )
        (list REMARK new_price_infos last_matured_price)
        &rest
        (fail-on-non-puzzle-announcement input_conditions announcer_conditions)
      )
    )
  )
)
