(mod (MOD_HASH STATUTES_STRUCT ATOM_ANNOUNCER_PUZZLE_HASH PRICES
      (@ oracle_mutation
              (
                oracle_mutation_program ; TODO: not needed anywhere. remove?
                statutes_inner_puzzle_hash
                m_of_n
                price_updatable_after_seconds
                price_updatable_threshold_percent
                price_expiration_seconds
                current_timestamp
                ; price_announcers -> ((inner_puzzle_hash args_hash price))
                price_announcers
              )

      )
      input_announcement_asserts
      )

  (include *standard-cl-23*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include utils.clib)
  (include oracle.clib)

  (assign
    price_announcers_length (if oracle_mutation (list-length price_announcers 0) ())
    statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
    sorted_prices (mergesort price_announcers)
    ; get median price, divide length by 2 and add 1 to get the middle when length is even
    mean_price (f (r (r (get-price sorted_prices (get-median-index price_announcers_length) 0))))
    announcer_conditions (generate-ann-conditions
      STATUTES_STRUCT
      (sha256tree STATUTES_STRUCT)
      ATOM_ANNOUNCER_PUZZLE_HASH
      price_announcers
    )
    ; we add latest price to the end of the list
    new_prices (merge-lists
      (cut-prices PRICES (- current_timestamp price_expiration_seconds))
      (list (c mean_price current_timestamp))
    )
    (next_price . next_price_updated) (f new_prices)
    (last_price . last_price_updated) (last-item PRICES)
    ;  new coin will have updated price, increase the counter of updates
    ;###  main expression
    ; check that we haven't updated the price recently OR new price is much higher than previous
    (assert
      (> price_announcers_length (- m_of_n 1))
      ; check that prices are unique
      (unique price_announcers)
      (> current_timestamp last_price_updated)
      (any
        (> (- current_timestamp last_price_updated) price_updatable_after_seconds)
        (if (> last_price 0)
          (> (abs (/ (* (- last_price mean_price) PERCENT_PRECISION) last_price) ) price_updatable_threshold_percent)
          ; no prices in buffer, update now
          1
        )
        (not (r new_prices)) ; only latest price in the list, this is fine too as all other prices are expired
      )
      ; should be confirmed at least within 5 blocks since it was pushed to mempool
      (li
        (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp MAX_TX_BLOCK_TIME ))
        ; current_timestamp - 1 min should've passed already too, this is to ensure current timestamp is
        ; within a boundary of last_block > current_timestamp - 1 block < next block
        (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp MAX_TX_BLOCK_TIME))
        (assert-statute statutes_puzzle_hash STATUTE_ORACLE_M_OF_N m_of_n)
        (assert-statute statutes_puzzle_hash STATUTE_ORACLE_PRICE_UPDATE_DELAY price_updatable_after_seconds)
        (assert-statute statutes_puzzle_hash STATUTE_ORACLE_ORACLE_PRICE_UPDATE_DELTA_BPS price_updatable_threshold_percent)
        (assert-statute statutes_puzzle_hash STATUTE_PRICE_DELAY price_expiration_seconds)
        (list CREATE_PUZZLE_ANNOUNCEMENT ; TODO: add protocol prefix?
          (if (> last_price -1)
            (sha256 next_price next_price_updated)
            (sha256 mean_price current_timestamp)
          )
        )
        (list
          CREATE_COIN
          (curry_hashes MOD_HASH
            (sha256 ONE MOD_HASH)
            (sha256tree STATUTES_STRUCT)
            (sha256 ONE ATOM_ANNOUNCER_PUZZLE_HASH)
            (sha256tree new_prices)
          )
          ; min singleton amount, force it to be ONE
          1
        )
        (list REMARK PROTOCOL_PREFIX new_prices mean_price last_price current_timestamp)
        &rest (verify-announcement-asserts input_announcement_asserts announcer_conditions)
      )
    )
  )
)