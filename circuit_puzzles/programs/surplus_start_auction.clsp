(mod
  (
    (MOD_HASH CAT_MOD_HASH BYC_TAIL_HASH CRT_TAIL_HASH LAST_BID LAUNCHER_ID BYC_LOT_AMOUNT STATUTES_STRUCT)
    statutes_inner_puzzle_hash lineage_proof announcements
    (
      p2_surplus_auction_coin_parent_id lot_amount p2_surplus_auction_mod_hash p2_treasury_hash
      start_time my_coin_id treasury_coins treasury_maximum
    )
  )

  (include *standard-cl-23*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include surplus_auction.clib)
  (include utils.clib)

  (defun assert-treasury-coins-withdrawal (P2_TREASURY_HASH CAT_MOD_HASH BYC_TAIL_HASH STATUTES_STRUCT treasury_maximum statutes_puzzle_hash
                                           treasury_coins my_coin_id lot_amount sum_amount CAT_leftover announcements)
    ; treasury_coins -> ((leader_launcher_1 . amount1) (launcher_2 . amount2)...)
    ; sorted in reverse order as we have no way to go backwards in a list
    ; we iterate over them extracting launcher id and previous launcher id to
    ; form a puzzle hash of each treasury coin in a ring. Amount should form a sum
    ; of lot amount needed for this surplus auction
    (if treasury_coins
      (assign
        ; treasury_coin -> (parent_id launcher_id current_amount withdraw_amount)
        (parent_id launcher_id prev_launcher_id current_amount withdraw_amount) (f treasury_coins)
        treasury_coin_id (assert
          (size_b32 launcher_id)
          (size_b32 prev_launcher_id)
          (calculate-coin-id
            parent_id
            (curry_hashes CAT_MOD_HASH
              (sha256 ONE CAT_MOD_HASH)
              (sha256 ONE BYC_TAIL_HASH)
              (curry_hashes
                P2_TREASURY_HASH
                (sha256 ONE P2_TREASURY_HASH)
                (sha256 ONE CAT_MOD_HASH)
                (sha256 ONE BYC_TAIL_HASH)
                (sha256tree STATUTES_STRUCT)
                (sha256 ONE prev_launcher_id)
                (sha256 ONE launcher_id)
              )
            )
            current_amount ; taking second of (launcher_id amount) pair
          )
        )
        (c
          ; send a message to approve treasury coins for withdrawal
          (list SEND_MESSAGE 0x3f
            (concat
              PROTOCOL_PREFIX
              ANN_PREFIX
              treasury_coin_id
              (* -1 withdraw_amount)
              (- current_amount withdraw_amount)
            )
            treasury_coin_id
          )
          (assert-treasury-coins-withdrawal
            P2_TREASURY_HASH CAT_MOD_HASH BYC_TAIL_HASH STATUTES_STRUCT treasury_maximum statutes_puzzle_hash
            (r treasury_coins)
            my_coin_id
            lot_amount
            (+ sum_amount withdraw_amount)
            (- (+ CAT_leftover current_amount) withdraw_amount)
            announcements
          )
        )
      )
      ; we're withdrawing exactly what lot we require for this surplus auction
      ; and treasury needs to stay above maximum threshold, so to trigger surplus auction
      ; we need maximum + lot_amount
      (assert (= sum_amount lot_amount) (> CAT_leftover treasury_maximum)
        (c
          (assert-statute statutes_puzzle_hash STATUTE_TREASURY_MAXIMUM treasury_maximum) ; end of recursion
          announcements
        )
      )
    )
  )

  (assign
    statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
    p2_surplus_puzzle_hash (
      curry_hashes CAT_MOD_HASH
        (sha256 ONE CAT_MOD_HASH)
        (sha256 ONE BYC_TAIL_HASH)
        (curry_hashes p2_surplus_auction_mod_hash
          (sha256 ONE p2_surplus_auction_mod_hash)
          (sha256 ONE CAT_MOD_HASH)
          (sha256 ONE CRT_TAIL_HASH)
          (sha256 ONE MOD_HASH)
          (sha256 ONE my_coin_id)
        )
    )
    p2_surplus_auction_coin_id (calculate-coin-id
        p2_surplus_auction_coin_parent_id
        p2_surplus_puzzle_hash
        0 ; initial amount for the coin that holds our lot should be 0
    )
    (assert
      (size_b32 p2_surplus_auction_mod_hash)
      ; can't run if LAST_BID is set
      (= LAST_BID ())
      ; we can only run if launcher_id is not set
      ; since we'll be using current coin id as launcher id
      ; to guarantee uniqueness based on the amount we're taking from treasury
      ; ie: there's a limited amount that can be taken from treasury
      ;     and coin_id is unique per spend. Once this coin is filled from treasury
      ;     it can't be filled again, hence can be used as unique event in this coins history
      (= LAUNCHER_ID 0)
      (= BYC_LOT_AMOUNT 0)
      (c
        ; recreate itself setting the launcher_id, empty bid and coin amount is 0
        (list
          CREATE_COIN
          (curry_hashes
            MOD_HASH
            (sha256 ONE MOD_HASH)
            (sha256 ONE CAT_MOD_HASH)
            (sha256tree STATUTES_STRUCT)
            (sha256 ONE my_coin_id)
            (sha256 ONE lot_amount)
            (sha256 ONE BYC_TAIL_HASH)
            (sha256 ONE CRT_TAIL_HASH)
            (sha256 ONE ())
          )
          0
        )
        (c
          ; TODO: comment below can be deleted. requiring amount = 0 is not strictly speaking required.
          ;   it simply stops us to launch multiple Surplus Auctions from same parent coin.
          ; it's important to force the amount to zero, since we don't want parent to create multiple coins
          ; with the same amount and launcher_id, which would enable sibling coins to mess with the state and takeover
          ; the auction and the lot
          (list ASSERT_MY_AMOUNT 0)
          (c
            (list ASSERT_MY_COIN_ID my_coin_id)
            (c
              (assert-statute statutes_puzzle_hash STATUTE_SURPLUS_AUCTION_LOT lot_amount)
              (c
                (assert-statute statutes_puzzle_hash STATUTE_P2_TREASURY_MOD_HASH p2_treasury_hash)
                (c
                  (assert-statute statutes_puzzle_hash STATUTE_P2_SURPLUS_AUCTION_MOD_HASH p2_surplus_auction_mod_hash)
                  ; start_time minus one tx block time should already be in the past
                  (c (list ASSERT_SECONDS_ABSOLUTE (- start_time MAX_TX_BLOCK_TIME))
                    ; make sure that start_time hasn't happen yet, allow it to be in mempool for 5 tx blocks
                    (c (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ start_time (* 5 MAX_TX_BLOCK_TIME)))
                      ; assert p2_surplus_auction coin received the lot amount
                      (c (list RECEIVE_MESSAGE 0x3f (concat PROTOCOL_PREFIX p2_surplus_auction_coin_id lot_amount ()) p2_surplus_auction_coin_id) ; TODO: protocol prefix needed?
                        (c (list REMARK PROTOCOL_PREFIX my_coin_id lot_amount 0 () BYC_TAIL_HASH CRT_TAIL_HASH) ; TODO: no need to include BYC/CRT_TAIL_HASH in remark as immutable
                          (assert-treasury-coins-withdrawal
                            p2_treasury_hash
                            CAT_MOD_HASH
                            BYC_TAIL_HASH
                            STATUTES_STRUCT
                            treasury_maximum
                            statutes_puzzle_hash
                            treasury_coins
                            my_coin_id
                            lot_amount ; lot amount of byc offered
                            0 ; withdrawal sum amount
                            0 ; leftover byc amount
                            announcements
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)