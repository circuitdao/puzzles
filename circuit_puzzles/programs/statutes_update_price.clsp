(mod ((SINGLETON_MOD_HASH . SINGLETON_LAUNCHER_HASH)
       MOD_HASH STATUTES PRICE_INFO PAST_CUMULATIVE_STABILITY_FEE_DF PAST_CUMULATIVE_INTEREST_DF
       PRICE_UPDATE_COUNTER
       _ ; mutation_index
       (@ mutation_value (oracle_inner_puz_hash oracle_price oracle_price_timestamp))
       _ ; governance_curried_ars_hash
     )

  (include *standard-cl-23.1*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include utils.clib)

  (defun-inline price-delay-statute (statutes)
    (f (f (r (r (r (r (r (r (r statutes)))))))))
  )

  ; we're updating statutes price info
  ; returning
  ; (
  ;   prev_announce
  ;   statutes
  ;   price_info
  ;   cumulative_stability_fee_df
  ;   cumulative_interest_df
  ;   price_update_counter
  ;   operation_conditions
  ; )
  (list
    () ; set PREV_ANNOUNCE to nil
    STATUTES ; no change to Statutes
    (c oracle_price oracle_price_timestamp) ; new Statutes Price Info. This is the price info received from Oracle with cutoff according to Statutes Price Delay
    ; to calculate cumulative stability fee discount factor we need:
    ; - past cumulative stability fee discount factor
    ; - current stability fee discount factor
    ; - timestamp of Oracle Price
    ; - timestamp of previous Statutes Price (ie when cumulative stability fee DF was last updated)
    (calculate-cumulative-discount-factor
      PAST_CUMULATIVE_STABILITY_FEE_DF
      (f (f (r STATUTES))) ; current SF DF
      oracle_price_timestamp ; Oracle Price timestamp
      (r PRICE_INFO) ; prev Statutes Price timestamp
    )
    ; to calculate current cumulative interest discount factor we need:
    ; - past cumulative interest discount factor
    ; - current interest discount factor
    ; - timestamp of Oracle Price
    ; - timestamp of previous Statutes Price (ie when cumulative interest DF was last updated)
    (calculate-cumulative-discount-factor
      PAST_CUMULATIVE_INTEREST_DF
      (f (f (r (r STATUTES)))) ; current IR DF
      oracle_price_timestamp ; Oracle Price timestamp
      (r PRICE_INFO) ; prev Statutes Price timestamp
    )
    ; increment price updates counter
    (+ PRICE_UPDATE_COUNTER 1)
    (assert
      ; new price should be fresher than current one
      (> oracle_price_timestamp (r PRICE_INFO))
      (assign-inline
        ; generate oracle singleton puzzle hash
        oracle_puzzle_hash (curry_hashes
          SINGLETON_MOD_HASH
          (sha256tree
            (c SINGLETON_MOD_HASH
              (c
                (f (f STATUTES)) ; -> oracle_launcher_id
                SINGLETON_LAUNCHER_HASH
              )
            )
          )
          oracle_inner_puz_hash
        )
        ; confirm oracle price info to update statutes price info
        (list
          ; allow oracle to announce price
          (list SEND_MESSAGE 0x12 '*' oracle_puzzle_hash)
          (list ASSERT_PUZZLE_ANNOUNCEMENT
            (sha256
              oracle_puzzle_hash
              (sha256tree (c oracle_price (c oracle_price_timestamp (price-delay-statute STATUTES))))
            )
          )
        )
      )
    )
  )
)
