(mod (STATUTES PRICE_INFO PAST_CUMULATIVE_STABILITY_FEE_DF PAST_CUMULATIVE_INTEREST_DF
      CAT_MOD_HASH CRT_TAIL_HASH PRICE_UPDATES
      _
      (@ mutation_value (oracle_inner_puz_hash statutes_struct price last_updated))
      crt_inner_puzzle_hash)
  (include *standard-cl-23*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include utils.clib)

  (defun calculate-cumulative-stability-fee-rate (past_cumulative_stability_fee current_stability_fee current_timestamp previous_timestamp)
    (if (> previous_timestamp current_timestamp)
      past_cumulative_stability_fee
      (calculate-cumulative-discount-factor
        (/ (* past_cumulative_stability_fee current_stability_fee) PRECISION)
        current_stability_fee
        current_timestamp
        ; per minute calculation
        (+ previous_timestamp 60)
      )
    )
  )


  ; we're updating prices
  ; returning -> statutes, price_info, cumulative_stability_fee, cumulative_interest_rate, price_updates, mutation_conditions
  (list
    STATUTES
    ; get the price, mutation value -> (oracle_inner_puz_hash statutes_struct price last_updated)
    (c price last_updated)
    ; second index on statutes is current stability_fee rate in 2 decimals eg 500 -> 5%
    ; to calculate stability_fee rate we need:
    ; - past cumulative stability_fee rate
    ; - current stability_fee rate
    ; - current timestamp
    ; - last timestamp of calculation previously
    (calculate-cumulative-discount-factor
      PAST_CUMULATIVE_STABILITY_FEE_DF
      (f (f (r STATUTES)))
      last_updated ; current timestamp
      ; get previous timestamp when price was last updated
      ; NOTE: this assumes that at least one oracle is always present and active at position 0
      (r PRICE_INFO) ; prev timestamp
    )
    (calculate-cumulative-discount-factor
      PAST_CUMULATIVE_INTEREST_DF
      ; current interest rate
      (f (f (r (r STATUTES))))
      last_updated
      ; get previous timestamp when price was last updated
      ; NOTE: this assumes that at least one oracle is always present and active at position 0
      (r PRICE_INFO)
    )
    ; increase the price updates counter to be used by announcers to claim rewards
    (+ PRICE_UPDATES 1)
    (assign
      ; first item is price oracle info on statues
      oracle_launcher_id (f (f STATUTES))
      ; we need prev price to assert that latest one is fresher
      (prev_price . prev_last_updated) PRICE_INFO
      (assert_debug
        (> last_updated prev_last_updated)
        (size_b32 oracle_inner_puz_hash)
        (size_b32 oracle_launcher_id)
        (size_uint32 price)
        ; confirm to oracle price announcement to update the price
        (list
          (list ASSERT_PUZZLE_ANNOUNCEMENT
            (sha256
              ; generate oracle puzzle hash
              (curry_hashes
                ; statutes struct is passed as a solution and could be anything, although it's expected to be a singleton
                ; with singleton id that we have stored at launch, so that ensures that passed statutes struct must be correct
                ; otherwise puzzle can't be asserted
                (f statutes_struct) ; singleton mod hash
                (sha256tree (c (f statutes_struct) (c oracle_launcher_id (r (r statutes_struct)))))
                oracle_inner_puz_hash
              )
              (sha256 price last_updated)
            )
          )
        )
      )
    )
  )
)