(mod
  (
    (@ VAULT_STATE
      (
       DEPOSITED_AMOUNT CAT_MOD_HASH BYC_TAIL_HASH BYC_MINTED_AMOUNT AUCTION_STATE INNER_PUZZLE_HASH
       STATUTES_STRUCT DISCOUNTED_PRINCIPAL TRANSFERRED_FEES statutes_puzzle_hash
      )
    )
    (@ args
      (
        tx_current_timestamp
        byc_to_bid
        byc_melting_coin_info
        byc_treasury_coin_info
        liquidation_penalty_percent
        statutes_cumulative_stability_fee_rate
        target_puzzle_hash
        my_coin_id
        auction_timeout
        offer_mod_hash
        p2_treasury_mod_hash
        price_info
        current_stability_fee_rate
      )
    )
  )

  (include *standard-cl-23*)
  (include utils.clib)
  (include vault.clib)
  (include statutes_utils.clib)
  (include condition_codes.clib)
  (include curry.clib)

  (assign
    current_timestamp (+ tx_current_timestamp (* 3 MAX_TX_BLOCK_TIME))
    cumulative_stability_fee_rate (calculate-cumulative-discount-factor
      statutes_cumulative_stability_fee_rate
      current_stability_fee_rate
      current_timestamp
      (r price_info)
    )
    (fees . liquidation_penalty) (assert (> liquidation_penalty_percent 0) (calculate-fees
      byc_to_bid
      cumulative_stability_fee_rate
      DISCOUNTED_PRINCIPAL
      BYC_MINTED_AMOUNT
      liquidation_penalty_percent
    ))
    ; parse auction state as we'll need to verify it's still running and hasn't timed out
    (auction_start_time
     start_price
     step_price_decrease_factor
     step_time_interval
     initiator_puzzle_hash
     initiator_incentive_balance) (assert AUCTION_STATE AUCTION_STATE)

    fees_to_pay (if (> TRANSFERRED_FEES fees)
      0
      (- fees TRANSFERRED_FEES)
    )
    fees_to_not_pay (- fees fees_to_pay)
    initiator_incentive (
      if (> initiator_incentive_balance 0)
        (if (> initiator_incentive_balance fees_to_pay)
          fees_to_pay ; all fees go to keeper that initiated the auction
          initiator_incentive_balance ; fees are more than incentive, so we pay the incentive and the rest goes to treasury
        )
        0 ; no incentive
    )
    fees_for_treasury (- fees_to_pay initiator_incentive)
    byc_principal_to_melt (- byc_to_bid fees)
    ; negative because we need negative value in the coin announcements later on
    negative_byc_principal_to_melt (* -1 byc_principal_to_melt)
    undiscounted_principal (/ (* DISCOUNTED_PRINCIPAL cumulative_stability_fee_rate) PRECISION)
    discounted_principal (if (= (- byc_to_bid liquidation_penalty) undiscounted_principal)
      0
      (discount-principal-for-melt
        DISCOUNTED_PRINCIPAL
        (* -1 (- byc_to_bid liquidation_penalty))
        cumulative_stability_fee_rate
      )
    )
    current_price_factor (
      assert_debug (> current_timestamp auction_start_time)
        (*
          (/
            (*
              start_price
              step_price_decrease_factor
            )
            PERCENT_PRECISION
          )
          (/ (- current_timestamp auction_start_time) step_time_interval)
        )
    )
    current_price (- start_price (/ (* current_price_factor start_price) PERCENT_PRECISION))
    ; use all byc provided from keeper to get a piece of collateral
    bid_xch_collateral_amount_pre (/ (* (/ (* byc_to_bid PRECISION) (* current_price 10)) MOJOS) PRECISION)
    bid_xch_collateral_amount (
      if (> bid_xch_collateral_amount_pre DEPOSITED_AMOUNT)
        DEPOSITED_AMOUNT
        bid_xch_collateral_amount_pre
    )
    leftover_deposit (- DEPOSITED_AMOUNT bid_xch_collateral_amount)
    leftover_byc_minted_amount (
      if (> byc_principal_to_melt BYC_MINTED_AMOUNT)
        0
        (- BYC_MINTED_AMOUNT byc_principal_to_melt)
    )
    byc_coin_id_to_melt (calculate-byc-coin-id
      CAT_MOD_HASH
      BYC_TAIL_HASH
      byc_melting_coin_info
    )
    (treasury_parent treasury_launcher_id treasury_prev_launcher_id treasury_amount) (if byc_treasury_coin_info byc_treasury_coin_info (list 0 0 0 0))
    treasury_coin_id (if byc_treasury_coin_info
      (calculate-byc-coin-id
        CAT_MOD_HASH
        BYC_TAIL_HASH
        (list
          treasury_parent
          treasury_amount
          (curry_hashes
            p2_treasury_mod_hash
            (sha256tree p2_treasury_mod_hash)
            (sha256tree CAT_MOD_HASH)
            (sha256tree BYC_TAIL_HASH)
            (sha256tree STATUTES_STRUCT)
            (sha256tree treasury_prev_launcher_id)
            (sha256tree treasury_launcher_id)
          )
        )
      )
      ()
    )
    new_treasury_amount (+ fees_for_treasury treasury_amount)
    auction_state (
      ; update auction state based on the bid, which mostly means to set it to null if all debt was paid off
      ; which will push the vault back into usable state for owner of inner puzzle
      if (= leftover_byc_minted_amount 0)
        ()
        (list
          auction_start_time
          start_price
          step_price_decrease_factor
          step_time_interval
          initiator_puzzle_hash
          (- initiator_incentive_balance initiator_incentive)
        )
    )
    (assert_debug
      ; needs to be more than zero
      (> byc_principal_to_melt 0)
      (> BYC_MINTED_AMOUNT (- byc_principal_to_melt 1))
      ; check that we haven't passed liquidation timeout
      ; is previous auction still running by checking if auction_start_time hasn't timed out
      (> auction_timeout (- current_timestamp auction_start_time))
      ; sanity check for time
      (> current_timestamp (- auction_start_time 1))
      ; check that there is a deposit to bid for
      (if (> DEPOSITED_AMOUNT 0)
        1
        (x current_price_factor current_price)
      )
      (> leftover_deposit -1)
      (list
        ; auction_state -> (start_time start_price last_auction_price)
        (list
          (if (> TRANSFERRED_FEES fees)
            (- TRANSFERRED_FEES fees)
            0
          )
          leftover_deposit leftover_byc_minted_amount auction_state INNER_PUZZLE_HASH discounted_principal
        )
        (assign
          conditions (list
            ;(list REMARK "melting ann->" ANN_PREFIX "x" byc_coin_id_to_melt negative_byc_principal_to_melt (sha256tree STATUTES_STRUCT))
            ;(list REMARK "new state ->" leftover_deposit leftover_byc_minted_amount auction_state discounted_principal_no_fee)
            ; verify current time is actually current
            ; check that we current time was within the last 60 seconds
            (list REMARK 'updated state->' 'DISCOUNTED PRINCIPAL=' DISCOUNTED_PRINCIPAL 'MINTED AMOUNT=' BYC_MINTED_AMOUNT
                          'fees=' fees 'TRANSFERRED_FEES=' TRANSFERRED_FEES
                          'initiator incentive=' initiator_incentive_balance initiator_incentive
                          ' fees_for_treasury=' fees_for_treasury " byc principal=" byc_principal_to_melt " fees_to_not_pay=" fees_to_not_pay
                          " bid xch=" bid_xch_collateral_amount " liquidation penalty=" liquidation_penalty
                          " leftover deposit=" leftover_deposit " leftover byc=" leftover_byc_minted_amount
                          " auction=" auction_state " discounted principal=" discounted_principal " current price=" current_price)
            (list ASSERT_SECONDS_ABSOLUTE (- tx_current_timestamp MAX_TX_BLOCK_TIME))
            (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ tx_current_timestamp MAX_TX_BLOCK_TIME))
            ; validate coin id
            (list ASSERT_MY_COIN_ID my_coin_id)
            ; signal to tail that it can melt the BYC
            (list CREATE_COIN_ANNOUNCEMENT
              (concat
                VAULT_ANN_PREFIX
                'x'
                byc_coin_id_to_melt
                (- negative_byc_principal_to_melt fees_to_not_pay)
                (sha256tree STATUTES_STRUCT)
              )
            )
            ; get a melt confirmation from BYC tail
            (list ASSERT_COIN_ANNOUNCEMENT
              (sha256
                byc_coin_id_to_melt
                BYC_ANN_PREFIX
                'x'
                my_coin_id
                (- negative_byc_principal_to_melt fees_to_not_pay)
                (sha256tree STATUTES_STRUCT)
              )
            )
            ; assert that keeper absorbed their collateral + left over mojos from melting
            (list ASSERT_PUZZLE_ANNOUNCEMENT
              (sha256
                offer_mod_hash
                (sha256tree
                  (c
                    my_coin_id
                    (list
                      (list
                        target_puzzle_hash
                        (+ bid_xch_collateral_amount
                          (+ byc_principal_to_melt
                            ; we already minted these, so return them to keeper
                            fees_to_not_pay
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
            ; announce that we transferred collateral to target puzzle hash
            ;(list REMARK ANN_PREFIX "$" target_puzzle_hash bid_xch_collateral_amount)
            (if (> initiator_incentive 0)
              ; get an announcement from offer module that BYC was paid to initiator
              (list ASSERT_PUZZLE_ANNOUNCEMENT
                (sha256
                  (calculate-stability-fee-puzzle
                    CAT_MOD_HASH
                    BYC_TAIL_HASH
                    offer_mod_hash
                  )
                  ; nonce = my_coin_id, payments = (initiator puzzle hash, initiator incentive fee)
                  (sha256tree
                    (c my_coin_id
                    (list
                      (list initiator_puzzle_hash initiator_incentive (list initiator_puzzle_hash)))))
                )
              )
              ; else NOOP as we don't need to pay the negative fee
              (list REMARK)
            )
            (assert-statute statutes_puzzle_hash STATUTE_VAULT_AUCTION_STEP_TIME_INTERVAL step_time_interval)
            (assert-statute statutes_puzzle_hash STATUTE_VAULT_AUCTION_STEP_PRICE_DECREASE_FACTOR step_price_decrease_factor)
            (assert-statute statutes_puzzle_hash STATUTE_VAULT_AUCTION_TIMEOUT auction_timeout)
            ; assert cumulative stability fee rate
            (assert-statute statutes_puzzle_hash STATUTE_CUMULATIVE_STABILITY_FEE_DF statutes_cumulative_stability_fee_rate)
            ; assert liquidation penalty percent
            (assert-statute statutes_puzzle_hash STATUTE_VAULT_LIQUIDATION_PENALTY_PERCENT liquidation_penalty_percent)
            (assert-statute statutes_puzzle_hash STATUTE_P2_TREASURY_MOD_HASH p2_treasury_mod_hash)
            (assert-statute statutes_puzzle_hash STATUTE_OFFER_MOD_HASH offer_mod_hash)
            (assert-price-info statutes_puzzle_hash price_info)
            (assert-statute statutes_puzzle_hash STATUTE_STABILITY_FEE_DF current_stability_fee_rate)
          )
          (if (> fees_for_treasury 0)
            ; get an announcement that BYC was paid into treasury
            (c
              (list CREATE_COIN_ANNOUNCEMENT
                (concat VAULT_ANN_PREFIX treasury_coin_id fees_for_treasury new_treasury_amount)
              )
              (c
                (list ASSERT_COIN_ANNOUNCEMENT
                  (sha256
                    treasury_coin_id
                    TREASURY_ANN_PREFIX
                    my_coin_id
                    fees_for_treasury
                    new_treasury_amount
                  )
                )
                conditions
              )
            )
            ; maybe we set fees to zero for some reason, so don't charge anything
            conditions
          )
        )
      )
    )
  )
)