(mod
  (
    (@ VAULT_STATE
      (
       DEPOSITED_AMOUNT CAT_MOD_HASH BYC_TAIL_HASH BYC_MINTED_AMOUNT AUCTION_STATE INNER_PUZZLE_HASH
       ORACLE_PRICE_ID STATUTES_STRUCT DISCOUNTED_PRINCIPAL TRANSFERRED_FEES statutes_puzzle_hash ; REVIEW: ORACLE_PRICE_ID no longer needed. remove
      )
    )
    (@ args
      (
         byc_amount_to_mint my_coin_id minimum_debt_amount collateralization_ratio ; REVIEW: rename collateralization_ratio to liquidation_ratio
         price_info
         byc_issuing_coin_info  ; (parent_id amount inner_puzzle_hash)
         statutes_cumulative_stability_fee_rate
         current_stability_fee_rate current_timestamp
      )
    )
  )

  (include *standard-cl-23*)
  (include utils.clib)
  (include vault.clib)
  (include statutes_utils.clib)
  (include condition_codes.clib)
  (include curry.clib)

  (assign
    ; calculate the latest cumulative stability fee rate
    cumulative_stability_fee_rate (calculate-cumulative-stability-fee-rate
      statutes_cumulative_stability_fee_rate
      current_stability_fee_rate
      current_timestamp
      (f (r price_info))
    )
    (xch_price last_updated) price_info
    principal (+ BYC_MINTED_AMOUNT byc_amount_to_mint)
    ; divide negative numbers to ceil
    discounted_mint_amount (* -1 (/ (* -1 byc_amount_to_mint PRECISION) cumulative_stability_fee_rate))
    discounted_principal (+ DISCOUNTED_PRINCIPAL discounted_mint_amount)
    ; calculate the coin id for the new BYC coin by enforcing the tail hash
    byc_issuing_coin_id (calculate-byc-coin-id
      CAT_MOD_HASH
      BYC_TAIL_HASH
      byc_issuing_coin_info
    )
    ; check that total debt is larger than minted amount, not minimum mint amount
    (assert (> (+ BYC_MINTED_AMOUNT byc_amount_to_mint) minimum_debt_amount) ; REVIEW: need to ensure that debt, not principal, is > min debt amount
            (> byc_amount_to_mint 0)
            ; check if requested amount of BYC to mint takes us over the collateralization ratio
            (> (available-to-mint DEPOSITED_AMOUNT BYC_MINTED_AMOUNT collateralization_ratio xch_price) byc_amount_to_mint) ; REVIEW: debt, not BYC minted, is relevant
      (list
        ; updated state
        (list TRANSFERRED_FEES DEPOSITED_AMOUNT principal AUCTION_STATE INNER_PUZZLE_HASH discounted_principal)
        ; additional conditions
        (list
          ; REVIEW: is this remark needed, or remove?
          (list REMARK "VAULT==>" discounted_principal ANN_PREFIX "i" byc_issuing_coin_id byc_amount_to_mint (sha256tree STATUTES_STRUCT) ORACLE_PRICE_ID)
          ; signal to tail that it can issue BYC with certain amount
          (list CREATE_COIN_ANNOUNCEMENT
            (concat
              ANN_PREFIX; REVIEW: rename to VAULT_ANN_PREFIX if we rename it in vault.clib
              "i"
              byc_issuing_coin_id
              byc_amount_to_mint
              (sha256tree STATUTES_STRUCT)
              ORACLE_PRICE_ID
            )
          )
          ; make sure tail has actually issued it too
          (list ASSERT_COIN_ANNOUNCEMENT
            (sha256
              byc_issuing_coin_id
              BYC_ANN_PREFIX
              'i'
              my_coin_id
              byc_amount_to_mint
              (sha256tree STATUTES_STRUCT)
              ORACLE_PRICE_ID
            )
          )
          (assert-statute statutes_puzzle_hash STATUTE_CUMULATIVE_STABILITY_FEE_RATE statutes_cumulative_stability_fee_rate)
          (assert-statute
            statutes_puzzle_hash
            STATUTE_COLLATERALIZATION_RATIO
            collateralization_ratio)
          (assert-statute
            statutes_puzzle_hash
            STATUTE_MINIMUM_VAULT_DEBT_AMOUNT
            minimum_debt_amount)
          (assert-price
            statutes_puzzle_hash
            ORACLE_PRICE_ID
            price_info)
          (list ASSERT_MY_COIN_ID my_coin_id)
          (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp 60))
          (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp 120))
          (assert-statute statutes_puzzle_hash STATUTE_STABILITY_FEE_RATE current_stability_fee_rate)
        )
      )
    )
  )
)
