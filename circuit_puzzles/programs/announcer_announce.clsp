(mod ((MOD_HASH STATUTES_STRUCT LAUNCHER_ID INNER_PUZZLE_HASH APPROVED DEPOSIT DELAY ATOM_VALUE COOLDOWN_START LAST_PENALTY_INTERVAL TIMESTAMP_EXPIRES)
      ; solution
      inner_puzzle_hash new_puzzle_hash deposit input_conditions
      _
     )

  (include *standard-cl-23*)
  (include condition_codes.clib)
  (include curry.clib)
  (include utils.clib)

  (li
    (list CREATE_PUZZLE_ANNOUNCEMENT
      (sha256
        (sha256tree STATUTES_STRUCT)
        INNER_PUZZLE_HASH
        APPROVED
        ATOM_VALUE
      )
    )
    (list ASSERT_BEFORE_SECONDS_ABSOLUTE TIMESTAMP_EXPIRES)
    (list CREATE_COIN
      (curry_hashes MOD_HASH
        (sha256 ONE MOD_HASH)
        (sha256tree STATUTES_STRUCT)
        (sha256 ONE LAUNCHER_ID)
        (sha256 ONE INNER_PUZZLE_HASH)
        (sha256 ONE APPROVED)
        (sha256 ONE DEPOSIT)
        (sha256 ONE DELAY)
        (sha256 ONE (if (all APPROVED (> 1 ATOM_VALUE)) (x) ATOM_VALUE))
        (sha256 ONE COOLDOWN_START)
        (sha256 ONE LAST_PENALTY_INTERVAL)
        (sha256 ONE TIMESTAMP_EXPIRES)
      )
      deposit
      (list INNER_PUZZLE_HASH)
    )
    ; driver remark to reveal the puzzle hash
    (list REMARK LAUNCHER_ID INNER_PUZZLE_HASH DEPOSIT APPROVED DELAY ATOM_VALUE COOLDOWN_START LAST_PENALTY_INTERVAL TIMESTAMP_EXPIRES)
    &rest
    input_conditions
  )
)