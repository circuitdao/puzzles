; mutation of announcers curried values by owner
; can mutate the atom value only, or also deactivate itself or topup deposit
(mod ((MOD_HASH STATUTES_STRUCT LAUNCHER_ID INNER_PUZZLE_HASH APPROVED DEPOSIT DELAY ATOM_VALUE COOLDOWN_START LAST_PENALTY_INTERVAL TIMESTAMP_EXPIRES)
      ; solution
      inner_puzzle_hash new_puzzle_hash deposit input_conditions
      (current_timestamp atom_value)
     )

  (include *standard-cl-23*)
  (include condition_codes.clib)
  (include curry.clib)
  (include utils.clib)

  (if (all
      LAUNCHER_ID
      inner_puzzle_hash  ; must be owner
    )
    (li
      (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp MAX_TX_BLOCK_TIME))
      (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp MAX_TX_BLOCK_TIME))
      (list CREATE_COIN
        (curry_hashes MOD_HASH
          (sha256 ONE MOD_HASH)
          (sha256tree STATUTES_STRUCT)
          (sha256 ONE LAUNCHER_ID)
          (sha256 ONE (if new_puzzle_hash new_puzzle_hash INNER_PUZZLE_HASH))
          (sha256 ONE APPROVED)
          (sha256 ONE DEPOSIT)
          (sha256 ONE DELAY)
          (sha256 ONE atom_value)
          (sha256 ONE COOLDOWN_START)
          (sha256 ONE LAST_PENALTY_INTERVAL)
          (sha256 ONE (+ current_timestamp DELAY))
        )
        DEPOSIT
        (list (if new_puzzle_hash new_puzzle_hash INNER_PUZZLE_HASH))
      )
      (list REMARK
        LAUNCHER_ID
        (if new_puzzle_hash new_puzzle_hash INNER_PUZZLE_HASH)
        DEPOSIT
        APPROVED
        DELAY
        atom_value
        COOLDOWN_START
        LAST_PENALTY_INTERVAL
        (+ current_timestamp DELAY)
      )
      &rest
      input_conditions
    )
    (x)
  )
)