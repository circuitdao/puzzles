(mod
  (
    (@ VAULT_STATE
      (
       DEPOSITED_AMOUNT CAT_MOD_HASH BYC_TAIL_HASH BYC_MINTED_AMOUNT AUCTION_STATE INNER_PUZZLE_HASH
       STATUTES_STRUCT DISCOUNTED_PRINCIPAL TRANSFERRED_FEES statutes_puzzle_hash
      )
    )
    (@ args
      (
         byc_to_repay my_coin_id statutes_cumulative_stability_fee_rate byc_melting_coin_info minimum_principal_amount
         byc_treasury_coin_info p2_treasury_mod_hash price_info current_stability_fee_rate current_timestamp
      )
    )
  )

  (include *standard-cl-23*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include utils.clib)
  (include vault.clib)

  (assign
    cumulative_stability_fee_rate (calculate-cumulative-discount-factor
      statutes_cumulative_stability_fee_rate
      current_stability_fee_rate
      ; don't allow anyone to pay less by borrowing from the future
      (+ current_timestamp (* 3 MAX_TX_BLOCK_TIME))
      (r price_info)
    )
    (calculated_stability_fee . _) (calculate-fees
      byc_to_repay
      cumulative_stability_fee_rate
      DISCOUNTED_PRINCIPAL
      BYC_MINTED_AMOUNT
      0 ; no liquidation penalty when repaying
    )
    fees_to_pay (if (> TRANSFERRED_FEES calculated_stability_fee)
      0
      (- calculated_stability_fee TRANSFERRED_FEES)
    )
    fees_to_not_pay (- calculated_stability_fee fees_to_pay)
    ; burn the byc that's left after fees are paid
    negative_byc_principal_to_melt (* -1 (- byc_to_repay calculated_stability_fee))
    new_byc_minted_amount (+
      BYC_MINTED_AMOUNT
      negative_byc_principal_to_melt
    )
    undiscounted_principal (/ (* DISCOUNTED_PRINCIPAL cumulative_stability_fee_rate) PRECISION)
    new_discounted_principal (if (= byc_to_repay undiscounted_principal)
      0
      (discount-principal-for-melt
        DISCOUNTED_PRINCIPAL
        (* -1 byc_to_repay)
        cumulative_stability_fee_rate
      )
    )
    new_undiscounted_principal (/ (* new_discounted_principal cumulative_stability_fee_rate) PRECISION)
    (treasury_parent treasury_launcher_id treasury_prev_launcher_id treasury_amount) (if byc_treasury_coin_info byc_treasury_coin_info (list 0 0 0 0))
    treasury_coin_id (if byc_treasury_coin_info
      (calculate-byc-coin-id
        CAT_MOD_HASH
        BYC_TAIL_HASH
        (list
          treasury_parent
          treasury_amount
          (curry_hashes
            p2_treasury_mod_hash
            (sha256 ONE p2_treasury_mod_hash)
            (sha256 ONE CAT_MOD_HASH)
            (sha256 ONE BYC_TAIL_HASH)
            (sha256tree STATUTES_STRUCT)
            (sha256 ONE treasury_prev_launcher_id)
            (sha256 ONE treasury_launcher_id)
          )
        )
      )
      ()
    )
    new_treasury_amount (+ fees_to_pay treasury_amount)
    byc_coin_id_to_melt (calculate-byc-coin-id
      CAT_MOD_HASH
      BYC_TAIL_HASH
      byc_melting_coin_info
    )
    (assert_debug
      (> byc_to_repay 0)
      (> undiscounted_principal (- byc_to_repay 1))
      ; either we're above min debt or we're at zero debt, to avoid dusting attacks and keep
      ; vault liquidation costs at healthy levels
      (any (= new_byc_minted_amount 0) (> new_byc_minted_amount minimum_principal_amount))
      (any (> new_byc_minted_amount 0)  (all (= new_byc_minted_amount 0) (= new_discounted_principal 0)))
      ; current time must be at least after last oracle update
      (> current_timestamp (f price_info))
      (any (> new_byc_minted_amount 0)  (all (= new_byc_minted_amount 0) (= new_discounted_principal 0)))
      (list
        (list
          (if (> TRANSFERRED_FEES calculated_stability_fee)
            (- TRANSFERRED_FEES calculated_stability_fee)
            0
          ) ; final_transferred_fees in collateral_vault.clsp
          DEPOSITED_AMOUNT new_byc_minted_amount AUCTION_STATE INNER_PUZZLE_HASH new_discounted_principal)
        (assign
          conditions (c
            (list REMARK "melting ann->" fees_to_pay fees_to_not_pay TRANSFERRED_FEES byc_to_repay negative_byc_principal_to_melt cumulative_stability_fee_rate calculated_stability_fee
                                       new_treasury_amount new_byc_minted_amount undiscounted_principal DISCOUNTED_PRINCIPAL new_discounted_principal)
            (c
              (assert-statute statutes_puzzle_hash STATUTE_CUMULATIVE_STABILITY_FEE_DF statutes_cumulative_stability_fee_rate)
              (c
                (assert-statute statutes_puzzle_hash STATUTE_P2_TREASURY_MOD_HASH p2_treasury_mod_hash)
                (c (assert-statute statutes_puzzle_hash STATUTE_MINIMUM_VAULT_DEBT_AMOUNT minimum_principal_amount)
                  (c
                    (assert-price-info statutes_puzzle_hash price_info)
                    (c
                      (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp MAX_TX_BLOCK_TIME))
                      (c
                        (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp MAX_TX_BLOCK_TIME))
                        (c
                          (list ASSERT_MY_COIN_ID my_coin_id)
                          (c
                            (assert-statute statutes_puzzle_hash STATUTE_STABILITY_FEE_DF current_stability_fee_rate)
                            (if (> negative_byc_principal_to_melt -1)
                              (list )
                              (list
                                ; signal to tail that it can melt the BYC
                                (list CREATE_COIN_ANNOUNCEMENT
                                  (concat
                                    VAULT_ANN_PREFIX
                                    'x'
                                    byc_coin_id_to_melt
                                    (- negative_byc_principal_to_melt fees_to_not_pay)
                                    (sha256tree STATUTES_STRUCT)
                                  )
                                )
                                ; get a melt confirmation from BYC tail
                                (list ASSERT_COIN_ANNOUNCEMENT
                                  (sha256
                                    byc_coin_id_to_melt
                                    BYC_ANN_PREFIX
                                    'x'
                                    my_coin_id
                                    (- negative_byc_principal_to_melt fees_to_not_pay)
                                    (sha256tree STATUTES_STRUCT)
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
          (if (> fees_to_pay 0)
            ; get an announcement from offer module that BYC was paid into treasury
            ; approve treasury coin to receive a deposit
            (c
              (list CREATE_COIN_ANNOUNCEMENT
                (concat VAULT_ANN_PREFIX treasury_coin_id fees_to_pay new_treasury_amount)
              )
              (c
                (list ASSERT_COIN_ANNOUNCEMENT
                  (sha256
                    treasury_coin_id
                    TREASURY_ANN_PREFIX
                    my_coin_id
                    fees_to_pay
                    new_treasury_amount
                  )
                )
                conditions
              )
            )
            ; else no approvals needed
            conditions
          )
        )
      )
    )
  )
)