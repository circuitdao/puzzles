(mod
  (
    (MOD_HASH CAT_MOD_HASH BYC_TAIL_HASH CRT_TAIL_HASH LAST_BID LAUNCHER_ID BYC_LOT_AMOUNT STATUTES_STRUCT)
    statutes_inner_puzzle_hash lineage_proof announcements
    (ttl current_timestamp my_amount crt_tail_puzzle p2_surplus_auction_coin_parent_id
     p2_surplus_auction_hash lot_amount limitation_solution)
  )

  (include *standard-cl-23*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include utils.clib)
  (include surplus_auction.clib)

  (assign
    statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
    (target_puzzle_hash timestamp) LAST_BID
    crt_tail_hash (sha256tree crt_tail_puzzle)
    p2_surplus_puzzle_hash (
      curry_hashes CAT_MOD_HASH
        (sha256 ONE CAT_MOD_HASH)
        (sha256 ONE BYC_TAIL_HASH)
        (curry_hashes p2_surplus_auction_hash
          (sha256 ONE p2_surplus_auction_hash)
          (sha256 ONE CAT_MOD_HASH)
          (sha256 ONE CRT_TAIL_HASH)
          (sha256 ONE MOD_HASH)
          (sha256 ONE LAUNCHER_ID)
        )
    )
    p2_surplus_auction_coin_id (calculate-coin-id
        p2_surplus_auction_coin_parent_id
        p2_surplus_puzzle_hash
        BYC_LOT_AMOUNT
    )
    (assert
      (size_b32 p2_surplus_auction_hash)
      ; ensure correct tail reveal is passed
      (= crt_tail_hash CRT_TAIL_HASH)
      ; ttl should've expired
      (> (- current_timestamp timestamp) ttl)
      ; check lot matches
      (= lot_amount BYC_LOT_AMOUNT)
      (c
        (list ASSERT_MY_AMOUNT my_amount)
        (c
          ; no recreate here, we create melting condition
          (list CREATE_COIN 0 -113 crt_tail_puzzle limitation_solution)
          (c
            (assert-statute statutes_puzzle_hash STATUTE_SURPLUS_AUCTION_BID_TTL ttl)
            (c
              (assert-statute statutes_puzzle_hash STATUTE_P2_SURPLUS_AUCTION_MOD_HASH p2_surplus_auction_hash)
              (c
                ; current_time minus one tx block time should already be in the past
                (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp MAX_TX_BLOCK_TIME))
                (c
                  ; make sure that current_timestamp hasn't happen yet, allow it to be in mempool for 5 tx blocks
                  (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp (* 5 MAX_TX_BLOCK_TIME)))
                  (c
                    ; assert p2_surplus_auction coin transferred the lot amount to the winner (target_puzzle_hash)
                    (list SEND_MESSAGE 0x3f (concat PROTOCOL_PREFIX lot_amount target_puzzle_hash) p2_surplus_auction_coin_id)
                    (c
                      ; ensure lineage so nobody can fake the winning bid
                      (list ASSERT_MY_PARENT_ID
                        (calculate-coin-id
                          (f lineage_proof)
                          (curry_hashes
                            CAT_MOD_HASH
                            (sha256 ONE CAT_MOD_HASH)
                            (sha256 ONE CRT_TAIL_HASH)
                            (tree_hash_of_apply MOD_HASH (f (r (r lineage_proof))))
                          )
                          ; parent bid amount
                          (f (r lineage_proof))
                        )
                      )
                      announcements
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)