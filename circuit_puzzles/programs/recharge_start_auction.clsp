(mod (
    ; REVIEW: rename MOD_HASH to MOD_WITH_OPERATIONS_HASH for consistency (as in recharge_launch.clsp)?
    (MOD_HASH CAT_MOD_HASH CAT_TAIL_HASH LAUNCHER_ID STATUTES_STRUCT START_TIME LAST_BID CRT_LOT_AMOUNT) ; REVIEW: CRT_LOT_AMOUNT no longer needed
    statutes_puzzle_hash lineage_proof announcements
    (
      start_time
      my_coin_id
      treasury_minimum
      auction_timeout
      p2_treasury_hash
      treasury_coins
    )
  )

  (include *standard-cl-23*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include utils.clib)
  (include recharge_auction.clib)

  (assign
    (treasury_coins_count treasury_coins_total) (count-treasury-coins treasury_coins 0 0)
    (assert
      LAUNCHER_ID
      ; can't run if LAST_BID is set
      (= LAST_BID ())
      ; can only (re-)start auction if it hasn't started yet
      (any
        (= START_TIME 0)
        (> (- start_time START_TIME) auction_timeout) ; REVIEW: START_TIME is set to 0 by both launch and win ops, so the timeout condition serves no purpose here?
      )
      (c
        (list
          CREATE_COIN
          (curry_hashes
            MOD_HASH
            (sha256 ONE MOD_HASH)
            (sha256 ONE CAT_MOD_HASH)
            (sha256 ONE CAT_TAIL_HASH)
            (sha256 ONE LAUNCHER_ID)
            (sha256tree STATUTES_STRUCT)
            (sha256 ONE start_time)
            (sha256 ONE ())
          )
          0
        )
        (c
          (list REMARK
            LAUNCHER_ID
            start_time
            () ; no bids
          )
          (c
            (assert-statute statutes_puzzle_hash STATUTE_RECHARGE_AUCTION_TIMEOUT auction_timeout)
            (c
              (assert-statute statutes_puzzle_hash STATUTE_TREASURY_MINIMUM treasury_minimum)
              (c
                (assert-statute statutes_puzzle_hash STATUTE_P2_TREASURY_MOD_HASH p2_treasury_hash)
                (c
                  ; start_time minus one tx block time should already be in the past
                  (list ASSERT_SECONDS_ABSOLUTE (- start_time MAX_TX_BLOCK_TIME))
                  (c
                    ; make sure that start_time hasn't happened yet, allow it to be in mempool for 5 tx blocks
                    (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ start_time (* 5 MAX_TX_BLOCK_TIME)))
                    (c
                      ; start balance should be zero
                      (list ASSERT_MY_AMOUNT 0)
                      (c
                        (list ASSERT_MY_COIN_ID my_coin_id)
                        (c
                          (list ASSERT_MY_PARENT_ID
                            (sha256
                              (f lineage_proof)
                              (curry_hashes
                                CAT_MOD_HASH
                                (sha256tree CAT_MOD_HASH)
                                (sha256tree CAT_TAIL_HASH)
                                (curry_hashes
                                  MOD_HASH
                                  (sha256tree MOD_HASH)
                                  (sha256tree CAT_MOD_HASH)
                                  (sha256tree CAT_TAIL_HASH)
                                  ; REVIEW: use partial state hash for lineage proof instead of individual args?
                                  ;  Actually, START_TIME and LAST_BID of parent (launcher coin) are enforced to be 0/(), so only state arg needed in lineage_proof is launcher_id
                                  (sha256tree (f (r (r lineage_proof)))) ; launcher_id
                                  (sha256tree STATUTES_STRUCT)
                                  (sha256tree (f (r (r (r lineage_proof))))) ; start_time
                                  (sha256tree (f (r (r (r (r lineage_proof)))))) ; bid
                                )
                              )
                              ; parent bid amount
                              (f (r lineage_proof))
                            )
                          )
                          ; REVIEW: what does this do/why is it needed?
                          ;   creates a bunch of messages/announcements/asserts with treasury coins, but what's the point if none of this info is retained in state?
                          ;   if not needed, can remove some args from solution
                          (deposit-to-treasury ; we will evenly distribute the lot amount to treasury coins
                            p2_treasury_hash
                            CAT_MOD_HASH
                            CAT_TAIL_HASH
                            STATUTES_STRUCT
                            treasury_minimum
                            statutes_puzzle_hash
                            treasury_coins_total ; expected balance after deposit of lot
                            0 ; amount deposited
                            0 ; deposit amount
                            0 ; potential remainder
                            (f treasury_coins)
                            treasury_coins
                            my_coin_id
                            announcements
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)