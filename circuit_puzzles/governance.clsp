;; a governance puzzle used to propose, enact, and veto bills that change the statutes if enacted
;; this puzzle is to be used with CRT tail
(mod (OPERATIONS
      MOD_HASH
      CAT_MOD_HASH 
      TAIL_MOD_HASH 
      STATUTES_STRUCT
      INNER_PUZZLE_HASH ; hash of the inner puzzle, so that we don't need to reveal it in veto conditions
      BILL ; bill is a potential statute if enacted
      inner_puzzle ; if provided, we're in owner mode
      inner_solution
      veto_conditions
     ) 
   
  (include *standard-cl-23*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include utils.clib)

  (defconst VETO_PROPOSED_BILL -1)
  (defconst ANN_PREFIX 'G')

  (defun filter-conditions (MOD_HASH CAT_MOD_HASH TAIL_MOD_HASH STATUTES_STRUCT INNER_PUZZLE_HASH
                            final_bill bill_operation
                            (@ conditions ((condition_code . condition_rest) . rest_of_conditions))
                            found_create_coin filtered_conditions)
     (if conditions
       (if (= condition_code CREATE_COIN)
         (filter-conditions
           MOD_HASH CAT_MOD_HASH TAIL_MOD_HASH STATUTES_STRUCT INNER_PUZZLE_HASH
           final_bill bill_operation
           rest_of_conditions
           1 ; we found a create coin condition
           (assert_debug
             ; amount should be >= 0
             (> (f (r condition_rest)) -1 )
             ; only one create coin allowed when in governance mode
             (= found_create_coin 0)
             (c
               ; REMARK condition to make it easy to generate puzzle reveal for drivers
               (list REMARK
                 bill_operation
                 final_bill
                 (f condition_rest) ; inner puzzle hash
               )
               (c
                 (c
                   CREATE_COIN
                   (c
                     (if (f condition_rest)
                       (curry_hashes MOD_HASH
                         (sha256tree MOD_HASH)
                         (sha256tree CAT_MOD_HASH)
                         (sha256tree TAIL_MOD_HASH)
                         (sha256tree STATUTES_STRUCT)
                         (sha256tree (f condition_rest))
                         (sha256tree final_bill)
                       )
                       ; disable the governance and use the inner puzzle if passed puzzle hash is 0
                       INNER_PUZZLE_HASH
                     )
                     (r condition_rest)
                   )
                 )
                 filtered_conditions
               )
             )
           )
         )
         (if (any (= condition_code CREATE_COIN_ANNOUNCEMENT) (= condition_code CREATE_PUZZLE_ANNOUNCEMENT))
           (assert_debug
             ; not just filter out announcements with our prefix namespace
             ; but raise an error if someone is trying to be cheeky
             (not
                 (= (substr (f condition_rest) 0 1) ANN_PREFIX)
             )
             (filter-conditions
               MOD_HASH CAT_MOD_HASH TAIL_MOD_HASH STATUTES_STRUCT INNER_PUZZLE_HASH
               final_bill bill_operation
               rest_of_conditions
               found_create_coin
               (c (f conditions) filtered_conditions)
             )
           )
           (if (= condition_code REMARK)
             ; filter out remarks since we use them for driver puzzle reveals
             (filter-conditions
               MOD_HASH CAT_MOD_HASH TAIL_MOD_HASH STATUTES_STRUCT INNER_PUZZLE_HASH
               final_bill bill_operation
               rest_of_conditions
               found_create_coin
               filtered_conditions
             )
             (filter-conditions
               MOD_HASH CAT_MOD_HASH TAIL_MOD_HASH STATUTES_STRUCT INNER_PUZZLE_HASH
               final_bill bill_operation
               rest_of_conditions
               found_create_coin
               (c (f conditions) filtered_conditions)
             )
           )
         )
       )
       (assert_debug found_create_coin filtered_conditions)
     )
   )


   (defun-inline calculate-crt-puzzle (MOD_HASH CAT_MOD_HASH TAIL_MOD_HASH STATUTES_STRUCT inner_puzzle_hash bill_hash )
     (curry_hashes CAT_MOD_HASH
       (sha256tree CAT_MOD_HASH)
       (sha256tree TAIL_MOD_HASH)
       (curry_hashes MOD_HASH
         (sha256tree MOD_HASH)
         (sha256tree CAT_MOD_HASH)
         (sha256tree TAIL_MOD_HASH)
         (sha256tree STATUTES_STRUCT)
         (sha256tree inner_puzzle_hash)
         bill_hash
       )
     )
   )

   (defun validate-veto-conditions (inner_puzzle_hash (@ veto_conditions ((condition_code . condition_body) . rest_of_conditions)) return_conditions)
     (if veto_conditions
       (if (any (= condition_code ASSERT_COIN_ANNOUNCEMENT) (= condition_code REMARK))
         (validate-veto-conditions inner_puzzle_hash rest_of_conditions (c (f veto_conditions) return_conditions))
         (if (= condition_code CREATE_COIN)
           (if (= (f condition_body) inner_puzzle_hash)
             (validate-veto-conditions
               inner_puzzle_hash
               rest_of_conditions
               (c (f veto_conditions)
                 return_conditions
               )
             )
             (x)
           )
           (x)
         )
       )
       return_conditions
     )
   )

   (defun find-bill-condition ((@ conditions ((condition_code . condition_body) . rest_of_conditions)) bill_operation create_coin_amount)
     (if conditions
       (if (= condition_code REMARK)
         ; found REMARK
         (if (all (= 'b' (f condition_body)) (= bill_operation ()))
           (find-bill-condition rest_of_conditions (r condition_body) create_coin_amount)
           (find-bill-condition rest_of_conditions bill_operation create_coin_amount)
         )
         (if (all (= condition_code CREATE_COIN) (= create_coin_amount -1))
           ; found CREATE_COIN
           (find-bill-condition rest_of_conditions bill_operation (f (r condition_body)))
           (find-bill-condition rest_of_conditions bill_operation create_coin_amount)
         )
       )
       (c (if bill_operation bill_operation (list () ())) create_coin_amount)
     )
   )

   ; ###################  MAIN ENTRY POINT  ########################
   (assign
     raw_inner_conditions (if inner_solution
       (a (assert_debug (sha256tree inner_puzzle INNER_PUZZLE_HASH) inner_puzzle) inner_solution)
       ; someone is trying to veto
       ; there should be specific create_coin in the conditions with same puzzle hash as curried in, announcements are allowed too
       (validate-veto-conditions INNER_PUZZLE_HASH veto_conditions ())
     )
     ((statutes_inner_puzzle_hash bill_operation . args) . new_coin_amount) (find-bill-condition raw_inner_conditions () -1)
     statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
     ; find the bill operation lambda and execute it, with new coin amount prepended
     ; so can be used in bill operation while we later assert it's correct
     operation_mod_hash (if bill_operation (sha256tree bill_operation) ())
     operation (if operation_mod_hash
       (if inner_solution
         (assert_debug (contains OPERATIONS operation_mod_hash)
           bill_operation
         )
         ; first operation is veto operation, but only if inner_solution is null
         (assert_debug (= operation_mod_hash (f OPERATIONS))
           bill_operation
         )
       )
       ()
     )
     (final_bill bill_conditions) (if operation
       (a
         operation
         (list
           (list BILL MOD_HASH INNER_PUZZLE_HASH CAT_MOD_HASH TAIL_MOD_HASH STATUTES_STRUCT statutes_puzzle_hash)
           (c new_coin_amount args)
         )
       )
       ; no bill operation, just return the conditions as we're transferring
       ; but transfer only possible when BILL not set
       (assert_debug inner_solution (if (not BILL) 1 (x raw_inner_conditions)) (list () ()))
     )
     ; iterate over all conditions and filter out the ones we don't need (REMARK)
     ; wrap CREATE_COIN with our own puzzle unless user wants to remove governance layer
     ; add a REMARK for driver assistance
     (filter-conditions
       MOD_HASH CAT_MOD_HASH TAIL_MOD_HASH STATUTES_STRUCT INNER_PUZZLE_HASH
       final_bill bill_operation
       raw_inner_conditions 0
       (c
         ; amount can't change while under governance mode
         ; to avoid double spending coins
         (list ASSERT_MY_AMOUNT new_coin_amount)
         bill_conditions
       )
     )
   )
)
