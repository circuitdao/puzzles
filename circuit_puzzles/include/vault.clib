(

  (defconst PRECISION 10000000000)
  ; REVIEW: PERCENT_PRECISION used in several places in this mod but isn't defined anywhere

  (defconst ANN_PREFIX 0x56) ; chr(86) -> "V" ; REVIEW: rename to VAULT_ANN_PREFIX in line with byc_tail.clsp?
  (defconst TREASURY_ANN_PREFIX 0x24) ; -> "$"
  (defconst BYC_ANN_PREFIX 0x42) ; chr(66) -> "B"

  (defun rpow_percent (base exponent)
    ; Raise a number to a power with fixed-point arithmetic, using recursion.
    (if (= exponent 0)
      PERCENT_PRECISION
      (if (all (l (divmod exponent 2)) (= (r (divmod exponent 2)) 1))
        (/ (* base (rpow_percent base (- exponent 1))) PERCENT_PRECISION)
        (rpow_percent (/ (* base base) PERCENT_PRECISION) (/ exponent 2))
      )
    )
  )

  (defun get-vault-operation-lambda (vault_operations vault_operation)
    (if vault_operations
      (if (= (f (f vault_operations)) vault_operation)
        (f (r (f vault_operations)))
        (get-vault-operation-lambda (r vault_operations) vault_operation)
      )
      ()
    )
  )

  ; REVIEW: Available to mint should be measured against debt, not BYC minted.
  ; REVIEW: rename collateralization ration to liquidation ratio
  (defun-inline available-to-mint (xch_deposited byc_minted coll_ratio xch_price)
    (assign
      max_to_mint (/ (/ (* xch_deposited xch_price 1000) coll_ratio) MOJOS)
      ; REVIEW: safer to return 0 instead of a clvm raise if assert fails?
      ;  Need to make sure failing works, eg if increasing liquidation ratio in Statutes results in a vault becoming liquidatable.
      (assert (> (- max_to_mint byc_minted) -1) 
        ; reduce max to mint by what we already have
        (- max_to_mint byc_minted)
      )
    )
  )

  (defun-inline percent-value (value percent)
    (assign percent_val (* (/ value 100) percent)
      (if percent_val
        percent_val
        ; value is smaller than 100, just return percent of what we want
        (if (> value 0)
          percent
          ; return zero if we're working with zero amounts
          value
        )
      )
    )
  )

  ; REVIEW: Should be assessed vs debt not BYC minted
  ; REVIEW: Rename collateralisation ratio to liquidation ratio
  (defun-inline get-min-collateral-amount (byc_minted coll_ratio xch_price)
        ; returns min collateral value for threshold coll ratio, multiplying with -1 to ceil the division
        (/ (* -1 (* (/ (* -1 byc_minted 100) xch_price) coll_ratio) MOJOS) 100000)
  )

  ; REVIEW: no need to use negative byc principal to melt. pass in the positive value
  (defun-inline discount-principal-for-melt (discounted_principal negative_byc_principal_to_melt cumulative_stability_fee_rate)
    (- discounted_principal
      (* 1 (/ ; REVIEW: outer (* 1 ...) not necessary
        (* (* -1 negative_byc_principal_to_melt) PRECISION)
        cumulative_stability_fee_rate
      ))
    )
  )

  (defun calculate-cumulative-stability-fee-rate
      (past_cumulative_stability_fee
       current_stability_fee
       current_timestamp
       previous_timestamp
      )
    (if (> previous_timestamp current_timestamp)
      past_cumulative_stability_fee
      (calculate-cumulative-stability-fee-rate
        (/ (* past_cumulative_stability_fee current_stability_fee) PRECISION)
        current_stability_fee
        current_timestamp
        ; per minute calculation
        (+ previous_timestamp 60)
      )
    )
  )

  (defun-inline calculate-fees (byc_amount cumulative_stability_fee_rate
                         discounted_principal
                         principal liquidation_penalty_percent)
    (assign
      undiscounted_principal (* 1 (/ (* 1 discounted_principal cumulative_stability_fee_rate) PRECISION)) ; REVIEW: remove outer (* 1 ...)? serves no purpose
      ; REVIEW: If SF >= 0, then undiscounted principal will always be >= principal. Check calculations below for simplifications.
      calculated_outstanding_fees (if (> undiscounted_principal principal) (- undiscounted_principal principal) 0)
      liquidation_penalty (/ (* (+ principal calculated_outstanding_fees) liquidation_penalty_percent) PERCENT_PRECISION) 
      total_debt (+ principal liquidation_penalty calculated_outstanding_fees)
      total_repayment_percentage (/ (* byc_amount PRECISION) total_debt)
      (if (= total_repayment_percentage PRECISION)
        (c (+ calculated_outstanding_fees liquidation_penalty) liquidation_penalty)
        (c
          (* -1
            (/
              (* -1 total_repayment_percentage (+ calculated_outstanding_fees liquidation_penalty))
              PRECISION
            )
          )
          (/ (* liquidation_penalty total_repayment_percentage) PRECISION)
        )
      )
    )
  )


  (defun-inline calculate-stability-fee-puzzle (CAT_MOD_HASH BYC_TAIL_HASH OFFER_MOD_HASH)
    (curry_hashes CAT_MOD_HASH
                  (sha256 ONE CAT_MOD_HASH)
                  (sha256 ONE BYC_TAIL_HASH)
                  OFFER_MOD_HASH
    )
  )

  (defun-inline calculate-byc-coin-id (CAT_MOD_HASH BYC_TAIL_HASH (parent_id amount inner_puzzle_hash))
    (calculate-coin-id
      parent_id
      (curry_hashes CAT_MOD_HASH
                    (sha256 ONE CAT_MOD_HASH)
                    (sha256 ONE BYC_TAIL_HASH)
                    ; inner puzzle for cat coin
                    inner_puzzle_hash
      )
      amount
    )
  )

)