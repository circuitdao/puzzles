
(

  (defconst ONE 1)
  (defconstant MOJOS 1000000000000)
  (defconstant PERCENT_PRECISION 10000)
  (defconst MAX_TX_BLOCK_TIME 120)
  (defconst PRECISION 10000000000)

  (defconst b32 32)
  (defun-inline size_b32 (var)
    (= (strlen var) b32)
  )

  (defun-inline size_uint32 (var)
    ; 5 bytes for uint32
    (> 6 (strlen var))
  )

  (defun-inline calculate-coin-id (parent puzzle_hash amount)
    (if (all (size_b32 parent) (size_b32 puzzle_hash) (> amount -1))
      (sha256 parent puzzle_hash amount)
      (x "bad coin id")
    )
  )

  (defun contains (lst item)
    (if lst
      (if (= (f (f lst)) item)
        1
        (contains (r lst) item)
      )
      ; not found
      (x)
    )
  )

  (defun assert_debug_ (items)
    (if (r items)
      (qq (if (unquote (f items)) (unquote (assert_debug_ (r items))) (x (unquote (c 1 (f items))))))
      (f items)
    )
  )
  ; this also shows which part of assert failed
  (defmac assert_debug items (assert_debug_ items))

  (defun assert_ (items)
    (if (r items)
      (qq (if (unquote (f items)) (unquote (assert_ (r items))) (x)))
      (f items)
      )
    )

  (defmac assert items (assert_ items))

  (defun sha256tree (TREE)
    (if (l TREE)
      (sha256 2 (sha256tree (f TREE)) (sha256tree (r TREE)))
      (sha256 1 TREE)
    )
  )

  (defun merge-lists (list_a list_b)
    (if list_a
        (c (f list_a) (merge-lists (r list_a) list_b))
        list_b
    )
  )



  (defconstant TRUE 1)
  (defconstant FALSE 0)


  (defun filter (pred (@ lst (first . rest)))
    (if lst
      (assign item (a pred (list first))
        (if item
          (c item (filter pred rest))
          (filter pred rest)
        )
      )
      ()
    )
  )


  (defun print (to-show result) (if (all "$print$" to-show result) result result))


)