(

  (defconst TREASURY_COIN_ANN_PREFIX 0x24) ; -> '$'
  (defconst ANN_PREFIX 'v')
  (defconst EQUALS '=')
  (defconst PROTOCOL_PREFIX 'CRT')

  ;(defconst REMARK 1)
  ;(defconst CREATE_COIN 51)
  ;(defconst CREATE_COIN_ANNOUNCEMENT 60)
  ;(defconst CREATE_PUZZLE_ANNOUNCEMENT 62)
  ;(defconst SEND_MESSAGE 66)
  ;(defconst RECEIVE_MESSAGE 67)

  (defun and_ (CLAUSES)
    (if (r CLAUSES)
      (qq (if (unquote (f CLAUSES)) (unquote (and_ (r CLAUSES))) ()))
      (f CLAUSES)
    )
  )

  ; logical AND function that evaluates clauses left to right
  (defmac and CLAUSES (if CLAUSES (and_ CLAUSES) 1))

  ; true/false for non-protocol/protocol create announcement condition
  (defun-inline is-valid-ann-cond (condition_body)
    (not
      (and
        (> (strlen (f condition_body)) 2)
        (= (substr (f condition_body) 0 3) PROTOCOL_PREFIX)
      )
    )
  )

  ; true/false for non-protocol/protocol message condition
  (defun-inline is-valid-msg-cond (condition_body)
    (not
      (and
        (= (strlen (f (r condition_body))) 3)
        (= (substr (f (r condition_body)) 0 3) PROTOCOL_PREFIX)
      )
    )
  )

  ; true/false for non-protocol/protocol remark condition
  (defun-inline is-valid-rmk-cond (condition_body)
    (not
      (and
        (= (strlen (f condition_body)) 3)
        (= (substr (f condition_body) 0 3) PROTOCOL_PREFIX)
      )
    )
  )

  ; fails if CREATE_COIN encountered, but otherwise lets all non-protocol conditions pass
  (defun filter-conditions ((@ conditions ( (condition_code . condition_body) . rest_of_conditions)) filtered_conditions)
    (if conditions
      (if (= condition_code CREATE_COIN)
        (x) ; no create coin allowed
        (if (= condition_code REMARK)
          (assert
            (is-valid-rmk-cond condition_body)
            (filter-conditions rest_of_conditions (c (f conditions) filtered_conditions))
          )
          (if (any (= condition_code SEND_MESSAGE) (= condition_code RECEIVE_MESSAGE))
            (assert
              (is-valid-msg-cond condition_body)
              (filter-conditions rest_of_conditions (c (f conditions) filtered_conditions))
            )
            (if (any (= condition_code CREATE_COIN_ANNOUNCEMENT) (= condition_code CREATE_PUZZLE_ANNOUNCEMENT))
              (assert
                (is-valid-ann-cond condition_body)
                (filter-conditions rest_of_conditions (c (f conditions) filtered_conditions))
              )
              (filter-conditions rest_of_conditions (c (f conditions) filtered_conditions))
            )
          )
        )
      )
      filtered_conditions
    )
  )

  (defun deposit-to-treasury (P2_TREASURY_HASH CAT_MOD_HASH CAT_TAIL_HASH STATUTES_STRUCT
                              treasury_minimum
                              statutes_puzzle_hash
                              final_treasury_amount
                              amount_deposited
                              deposit_amount
                              potential_remainder
                              first_treasury_coin
                              treasury_coins
                              my_coin_id
                              announcements)
    (if treasury_coins
      (assign
        (parent_id launcher_id prev_launcher_id current_amount) (f treasury_coins)
        (remainder next_parent_id next_launcher_id next_prev_launcher_id next_current_amount) (
          if (r treasury_coins)
            (c 0x00 (f (r treasury_coins)))
            (c potential_remainder first_treasury_coin)
        )
        delta (+ deposit_amount remainder)
        new_amount (+ next_current_amount delta)
        new_prev_amount (+ current_amount deposit_amount (if (= launcher_id (f (r first_treasury_coin))) potential_remainder 0))
        prev_treasury_coin_id (
          calculate-coin-id
            parent_id
            (curry_hashes CAT_MOD_HASH
              (sha256tree CAT_MOD_HASH)
              (sha256tree CAT_TAIL_HASH)
              (curry_hashes
                P2_TREASURY_HASH
                (sha256tree P2_TREASURY_HASH)
                (sha256tree CAT_MOD_HASH)
                (sha256tree CAT_TAIL_HASH)
                (sha256tree STATUTES_STRUCT)
                (sha256tree prev_launcher_id)
                (sha256tree launcher_id)
              )
            )
            current_amount ; taking second of (launcher_id amount) pair
        )
        treasury_coin_id (assert
          ; ensure first_treasury_coin is pointing to the same coin this coin is pointing to
          (= launcher_id next_prev_launcher_id)
          (calculate-coin-id
            next_parent_id
            (curry_hashes CAT_MOD_HASH
              (sha256tree CAT_MOD_HASH)
              (sha256tree CAT_TAIL_HASH)
              (curry_hashes
                P2_TREASURY_HASH
                (sha256tree P2_TREASURY_HASH)
                (sha256tree CAT_MOD_HASH)
                (sha256tree CAT_TAIL_HASH)
                (sha256tree STATUTES_STRUCT)
                (sha256tree next_prev_launcher_id)
                (sha256tree next_launcher_id)
              )
            )
            next_current_amount ; taking second of (launcher_id amount) pair
          )
        )
        (c
          ; we also send a message to each treasury coin so they can run
          (list SEND_MESSAGE 0x3f
            (concat
              PROTOCOL_PREFIX
              ANN_PREFIX
              treasury_coin_id
              delta
              new_amount
            )
            treasury_coin_id
          )
          (c
            ; check that whole ring is deposited
            (list ASSERT_COIN_ANNOUNCEMENT
              (sha256
                prev_treasury_coin_id
                TREASURY_COIN_ANN_PREFIX
                EQUALS ; as in '$=amount', to avoid collisions
                new_prev_amount
                ; link the coins, this previous coin to treasury_coin_id
                launcher_id
              )
            )
            (c
              (list ASSERT_COIN_ANNOUNCEMENT
                (sha256
                  treasury_coin_id
                  TREASURY_COIN_ANN_PREFIX
                  EQUALS ; as in '$=amount', to avoid collisions
                  new_amount
                  ; link the coins, this previous coin to treasury_coin_id
                  next_launcher_id
                )
              )
              (deposit-to-treasury
                P2_TREASURY_HASH CAT_MOD_HASH CAT_TAIL_HASH STATUTES_STRUCT
                treasury_minimum
                statutes_puzzle_hash
                final_treasury_amount
                (+ amount_deposited new_amount)
                deposit_amount
                potential_remainder
                first_treasury_coin
                (r treasury_coins)
                my_coin_id
                announcements
              )
            )
          )
        )
      )
      (assert
        (= amount_deposited final_treasury_amount)
        (if (all (= deposit_amount 0) (= potential_remainder 0))
          ; this is assert balance of treasury coins, point is to prove that recharge auction can be started
          (assert (> treasury_minimum final_treasury_amount)
            announcements
          )
          announcements
        )
      )
    )
  )

  (defun count-treasury-coins (treasury_coins count total_amount uniques)
    (if treasury_coins
      (count-treasury-coins
        (r treasury_coins)
        (+ 1 count)
        (+ total_amount (f (r (r (r (f treasury_coins))))))
        (if (contains uniques (f (r (f treasury_coins))))
          (x)
          (c (f (r (f treasury_coins))) uniques)
        )
      )
      (list count total_amount)
    )
  )


)