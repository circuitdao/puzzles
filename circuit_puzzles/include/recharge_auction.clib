(
  (defconst TREASURY_COIN_ANN_PREFIX 0x24) ; -> '$'
  (defconst ANN_PREFIX 'v')

  (defun filter-announcements ((@ conditions ( (condition_code . condition_rest) . rest_of_conditions)) filtered_announcements)
    (if conditions
      (if (any (= condition_code CREATE_PUZZLE_ANNOUNCEMENT) (= condition_code CREATE_COIN_ANNOUNCEMENT))
        (if (not
              (= (substr (f condition_rest) 0 1) ANN_PREFIX)
            )
          (filter-announcements
            rest_of_conditions
            (c (f conditions) filtered_announcements)
          )
          ; bad announcement found, error
          (x)
        )
        (if (any (= condition_code ASSERT_COIN_ANNOUNCEMENT) (= condition_code ASSERT_PUZZLE_ANNOUNCEMENT))
          (filter-announcements
            rest_of_conditions
            (c (f conditions) filtered_announcements)
          )
          ; no other conditions please
          (x)
        )
      )
      filtered_announcements
    )
  )

  (defun deposit-to-treasury (P2_TREASURY_HASH CAT_MOD_HASH CAT_TAIL_HASH STATUTES_STRUCT
                              treasury_minimum statutes_puzzle_hash final_treasury_amount
                              amount_deposited deposit_amount potential_remainder
                              first_treasury_coin treasury_coins my_coin_id announcements)
    (if treasury_coins
      (assign
        (parent_id launcher_id prev_launcher_id current_amount) (f treasury_coins)
        (remainder next_parent_id next_launcher_id next_prev_launcher_id next_current_amount) (
          if (r treasury_coins)
            (c 0x00 (f (r treasury_coins))) ; REVIEW: why 0x00 instead of just 0?
            (c potential_remainder first_treasury_coin)
        )
        delta (+ deposit_amount remainder)
        new_amount (+ next_current_amount delta)
        new_prev_amount (+ current_amount deposit_amount (if (= launcher_id (f (r first_treasury_coin))) potential_remainder 0))
        prev_treasury_coin_id (
          calculate-coin-id
            parent_id
            (curry_hashes CAT_MOD_HASH
              (sha256tree CAT_MOD_HASH)
              (sha256tree CAT_TAIL_HASH)
              (curry_hashes
                P2_TREASURY_HASH
                (sha256tree P2_TREASURY_HASH)
                (sha256tree CAT_MOD_HASH)
                (sha256tree CAT_TAIL_HASH)
                (sha256tree STATUTES_STRUCT)
                (sha256tree prev_launcher_id)
                (sha256tree launcher_id)
              )
            )
            current_amount ; taking second of (launcher_id amount) pair
        )
        treasury_coin_id (
          calculate-coin-id
            next_parent_id
            (curry_hashes CAT_MOD_HASH
              (sha256tree CAT_MOD_HASH)
              (sha256tree CAT_TAIL_HASH)
              (curry_hashes
                P2_TREASURY_HASH
                (sha256tree P2_TREASURY_HASH)
                (sha256tree CAT_MOD_HASH)
                (sha256tree CAT_TAIL_HASH)
                (sha256tree STATUTES_STRUCT)
                (sha256tree next_prev_launcher_id)
                (sha256tree next_launcher_id)
              )
            )
            next_current_amount ; taking second of (launcher_id amount) pair
        )
        (c
          (list ASSERT_COIN_ANNOUNCEMENT
            (sha256
              treasury_coin_id
              TREASURY_COIN_ANN_PREFIX
              my_coin_id
              delta
              new_amount
            )
          )
          (c
            ; we also create a coin announcement for each treasury coin
            (list CREATE_COIN_ANNOUNCEMENT
              (concat
                ANN_PREFIX
                treasury_coin_id
                delta
                new_amount
              )
            )
            (c
              (list REMARK
                  prev_treasury_coin_id
                  TREASURY_COIN_ANN_PREFIX
                  '=' ; as in '$=amount', to avoid collisions
                  new_prev_amount
                  ; link the coins, this previous coin to treasury_coin_id
                  launcher_id
              )
              (c
                ; check that whole ring is deposited
                (list ASSERT_COIN_ANNOUNCEMENT
                  (sha256
                    prev_treasury_coin_id
                    TREASURY_COIN_ANN_PREFIX
                    '=' ; as in '$=amount', to avoid collisions
                    new_prev_amount
                    ; link the coins, this previous coin to treasury_coin_id
                    launcher_id
                  )
                )
                (deposit-to-treasury
                  P2_TREASURY_HASH CAT_MOD_HASH CAT_TAIL_HASH STATUTES_STRUCT
                  treasury_minimum
                  statutes_puzzle_hash
                  final_treasury_amount
                  (+ amount_deposited new_amount)
                  deposit_amount
                  potential_remainder
                  first_treasury_coin
                  (r treasury_coins)
                  my_coin_id
                  announcements
                )
              )
            )
          )
        )
      )
      (assert
        (= amount_deposited final_treasury_amount)
        (if (all (= deposit_amount 0) (= potential_remainder 0))
          ; this is assert balance of treasury coins
          (assert (> treasury_minimum final_treasury_amount) ; REVIEW: can final_treasury_amount no be >= treasury_minimum in this scenario?
            announcements
          )
          ; we're depositing
          (assert (> final_treasury_amount treasury_minimum)
            announcements
          )
        )
      )
    )
  )

  (defun count-treasury-coins (treasury_coins count total)
    (if treasury_coins
      (count-treasury-coins
        (r treasury_coins)
        (+ 1 count)
        (+ total (f (r (r (r (f treasury_coins))))))
      )
      (list count total)
    )
  )


)