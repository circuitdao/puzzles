(mod (MAX_MINT_AMOUNT MIN_CLAIM_INTERVAL ATOM_ANNOUNCER_MOD_HASH
      MOD_HASH
      STATUTES_STRUCT
      ANNOUNCER_REGISTRY CLAIM_ITERATION
      lineage_proof mint_or_register . args)

  (include *standard-cl-23.1*)
  (include condition_codes.clib)
  (include curry.clib)
  (include prefixes.clib)
  (include utils.clib)
  (include statutes_utils.clib)

  (defconst REGISTER_OPCODE "r")
  (defconst MINT_OPCODE "m")
  
  ; generates notarized payments to announcer inner puzzle hashes as required by settlement payments puzzle
  (defun generate-offer-assert ((@ announcer_registry ( announcer_inner_puzzle_hash . rest_of_announcer_registry)) crt_credits_per_announcer payments)
    (if announcer_registry
      (generate-offer-assert
        rest_of_announcer_registry
        crt_credits_per_announcer
        (c
          (list
            announcer_inner_puzzle_hash
            crt_credits_per_announcer
            (list announcer_inner_puzzle_hash)
          )
          payments
        )
      )
      payments
    )
  )

  (defun list-length (lst count)
    (if lst
      (list-length (r lst) (+ count ONE))
      count
    )
  )

  (assign
    (announcer_registry claim_interval_number operation_conditions) (if (= mint_or_register MINT_OPCODE)
      ; this is minting
      (assign
        (
          statutes_inner_puzzle_hash
          statutes_price_updates
          crt_credits_per_interval
          claim_interval
          issuance_coin_info
          cat_mod_hash
          crt_tail_hash
          change_receiver_hash
          offer_mod_hash
        ) args
        statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
        current_iteration (/ statutes_price_updates claim_interval)
        announcers_count (list-length ANNOUNCER_REGISTRY 0)
        change_amount (r (divmod crt_credits_per_interval announcers_count))
        run_tail_mod_hash (f (r issuance_coin_info))
        issuance_coin_id (calculate-coin-id
          (f issuance_coin_info)
          (curry_hashes cat_mod_hash
            (sha256 ONE cat_mod_hash)
            (sha256 ONE crt_tail_hash)
            run_tail_mod_hash
          )
          (f (r (r issuance_coin_info)))
        )
        (assert
          (> current_iteration CLAIM_ITERATION)
          (> claim_interval MIN_CLAIM_INTERVAL)
          (> announcers_count 0)
          (> current_iteration ONE) ; rewards kick in only after initial interval
          ; we can't mint more than MAX_MINT_AMOUNT which is immutable to stop governance from inflating CRTs
          (> MAX_MINT_AMOUNT crt_credits_per_interval)
          (list
            () ; clear the registry when minting
            current_iteration
            (list
              (list SEND_MESSAGE 0x3f
                (concat
                  PROTOCOL_PREFIX
                  (sha256tree (c STATUTES_STRUCT (c offer_mod_hash crt_credits_per_interval)))
                )
                issuance_coin_id
              )
              (list CREATE_COIN_ANNOUNCEMENT '$') ; announcement to attach fee/funding coin to
              (assert-statute statutes_puzzle_hash STATUTE_CAT_MOD_HASH cat_mod_hash)
              (assert-statute statutes_puzzle_hash STATUTE_CRT_TAIL_HASH crt_tail_hash)
              (assert-statute statutes_puzzle_hash STATUTE_OFFER_MOD_HASH offer_mod_hash)
              (assert-statute statutes_puzzle_hash STATUTE_ANNOUNCER_CREDITS_INTERVAL claim_interval)
              (assert-statute statutes_puzzle_hash STATUTE_ANNOUNCER_CREDITS_PER_INTERVAL crt_credits_per_interval)
              (assert-statute statutes_puzzle_hash STATUTE_PRICE_UPDATE_COUNTER statutes_price_updates)
              (assert-statute statutes_puzzle_hash STATUTE_RUN_TAIL_MOD_HASH run_tail_mod_hash)
              (list ASSERT_PUZZLE_ANNOUNCEMENT
                (sha256
                  (curry_hashes cat_mod_hash
                      (sha256 ONE cat_mod_hash)
                      (sha256 ONE crt_tail_hash)
                      offer_mod_hash
                  )
                  (sha256tree
                    (c
                      0 ; nonce
                      (generate-offer-assert
                        ANNOUNCER_REGISTRY
                        (/ crt_credits_per_interval announcers_count)
                        (if (> change_amount 0)
                          ; we reward the mint spender with remainder if any
                          (list
                            (list
                              change_receiver_hash
                              change_amount
                              (list change_receiver_hash)
                            )
                          )
                          ()
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
      ; register
      (if (= mint_or_register REGISTER_OPCODE)
        (assign
          (announcer_inner_puzzle_hash announcer_curried_args_hash) args
          announcer_puzzle_hash (tree_hash_of_apply ATOM_ANNOUNCER_MOD_HASH announcer_curried_args_hash)
          (assert
            (size_b32 announcer_curried_args_hash)
            (size_b32 announcer_inner_puzzle_hash)
            (not (contains ANNOUNCER_REGISTRY announcer_inner_puzzle_hash))
            (list
              (c announcer_inner_puzzle_hash ANNOUNCER_REGISTRY)
              CLAIM_ITERATION
              (list
                ; assert approval from announcer coin with correct puzzle hash
                (list RECEIVE_MESSAGE 0x12
                  (concat
                    PROTOCOL_PREFIX
                    (sha256tree
                      (c announcer_inner_puzzle_hash
                        (c ONE ; must be an approved announcer
                           STATUTES_STRUCT ; must be on same protocol
                        )
                      )
                    )
                  )
                  announcer_puzzle_hash
                )
              )
            )
          )
        )
        ; this is a launch
        (assert (size_b32 lineage_proof)
          (list
            ANNOUNCER_REGISTRY
            CLAIM_ITERATION
            (list
              (list CREATE_COIN_ANNOUNCEMENT (sha256tree STATUTES_STRUCT))
            )
          )
        )
      )
    )
    ;### MAIN EXPRESSION ###
    (c
      (list ASSERT_MY_AMOUNT 0)
      ; prove lineage
      (c
        (if (l lineage_proof)
          (list ASSERT_MY_PARENT_ID (
            calculate-coin-id
              (f lineage_proof)
              (tree_hash_of_apply MOD_HASH (r lineage_proof))
              0
            )
          )
          ; this is a launch!
          ; this coin can only be started when statutes launch, we assert launcher coin of statutes here
          (list ASSERT_COIN_ANNOUNCEMENT (sha256 (f (r STATUTES_STRUCT)) lineage_proof))
        )
        (c
          (list ASSERT_MY_PUZZLE_HASH
            (curry_hashes MOD_HASH
              (sha256 ONE MOD_HASH)
              (sha256tree STATUTES_STRUCT)
              (sha256tree ANNOUNCER_REGISTRY)
              (sha256 ONE CLAIM_ITERATION)
            )
          )
          (c
            (list CREATE_COIN
              (curry_hashes MOD_HASH
                (sha256 ONE MOD_HASH)
                (sha256tree STATUTES_STRUCT)
                (sha256tree announcer_registry)
                (sha256 ONE claim_interval_number)
              )
              0 ; coin amount always zero since it only keeps the registry and mints new coins
            )
            (c
              (list REMARK PROTOCOL_PREFIX announcer_registry claim_interval_number)
              operation_conditions
            )
          )
        )
      )
    )
  )

)