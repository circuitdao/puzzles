; This is a "limitations_program" for use with cat.clvm for CRT token
(mod (
      GENESIS_ID CAT_MOD_HASH
      Truths parent_is_cat lineage_proof delta inner_conditions
      solution
     )

  (include *standard-cl-23*)
  (include condition_codes.clib)
  (include cat_truths.clib)
  (include curry.clib)
  (include utils.clib)
  (include statutes_utils.clib)

  (defun assert_ (items)
    (if (r items)
      (qq (if (unquote (f items)) (unquote (assert_ (r items))) (x (unquote (c 1 (f items))))))
      (f items)
      )
    )

  (defmac assert items (assert_ items))

  (if delta
    (if (> 0 delta)
      ; melting only by surplus auction
      (assign
        (
          crt_tail_hash
          byc_tail_hash
          surplus_mod_hash
          launcher_id
          byc_lot_amount
          last_bid
          statutes_inner_puzzle_hash
          statutes_struct ; REVIEW: not secure as not verified anywhere. curry into crt tail?
          approved_mod_hashes
        ) solution
        statutes_puzzle_hash (calculate-statutes-puzzle-hash statutes_struct statutes_inner_puzzle_hash)
        puzzle_hash (
          curry_hashes CAT_MOD_HASH
            (sha256 ONE CAT_MOD_HASH)
            (sha256 ONE crt_tail_hash)
            (curry_hashes surplus_mod_hash
              (sha256 ONE surplus_mod_hash)
              (sha256 ONE CAT_MOD_HASH)
              (sha256tree statutes_struct)
              (sha256 ONE launcher_id)
              (sha256 ONE byc_lot_amount)
              (sha256 ONE byc_tail_hash)
              (sha256 ONE crt_tail_hash)
              (sha256tree last_bid)
            )
        )
        (assert
          ; can't melt a non-cat
          parent_is_cat
          ; must be a launched surplus auction
          launcher_id
          ; must have a lot to exchange for melting
          (> byc_lot_amount 0)
          ; should have a winning bid
          last_bid
          (> (f (r last_bid)) 0)
          (= surplus_mod_hash (f (r approved_mod_hashes))) ; REVIEW: not secure. both passed in via solution without verification. assert vs statutes?
          (list
            ; if this is a surplus auction and it called for melting, melt
            (list ASSERT_MY_PUZZLEHASH puzzle_hash)
            ; we should be melting the whole coin value
            (list ASSERT_MY_AMOUNT (* -1 delta))
          )
        )
      )
      ; no minting
      (x)
    )
    (if (= (my_parent_cat_truth Truths) GENESIS_ID)
      ()
      ; third option is issuing by recharge auction
      (assign
        (
          mod_hash
          ann_prefix
          parent_id
          curried_mod_args
          byc_tail_hash
          amount
          issuance_amount
          my_coin_id
          approved_mod_hashes
          statutes_inner_puzzle_hash
          statutes_struct
        ) solution
        statutes_struct_hash (sha256tree statutes_struct)
        statutes_puzzle_hash (calculate-statutes-puzzle-hash statutes_struct statutes_inner_puzzle_hash)
        approving_coin_id (calculate-coin-id
          parent_id
          (curry_hashes CAT_MOD_HASH
            (sha256tree CAT_MOD_HASH)
            (sha256tree byc_tail_hash)
            (tree_hash_of_apply mod_hash curried_mod_args)
          )
          amount
        )
        (assert
          (= mod_hash (f (r (r approved_mod_hashes))))
          (= delta 0)
          (list
            (list CREATE_COIN_ANNOUNCEMENT (concat statutes_struct_hash issuance_amount))
            (list ASSERT_COIN_ANNOUNCEMENT
              (sha256
                approving_coin_id
                ann_prefix
                statutes_struct_hash
                my_coin_id
                issuance_amount
              )
            )
            (list ASSERT_MY_AMOUNT issuance_amount)
            (assert-statute statutes_puzzle_hash STATUTE_TREASURY_COIN_APPROVER_MOD_HASHES approved_mod_hashes)
          )
        )
      )
    )
  )
)
