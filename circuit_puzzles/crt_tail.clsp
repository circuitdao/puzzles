; Circuit CAT token (CRT) tail
(mod (
      GENESIS_ID STATUTES_STRUCT CAT_MOD_HASH
      Truths parent_is_cat lineage_proof delta
      inner_conditions ; we don't check these as since they're checked in approved mod puzzles,
                       ; and those are the only ones that can send the message
      solution
     )

  (include *standard-cl-23*)
  (include cat_truths.clib)
  (include condition_codes.clib)
  (include curry.clib)
  (include statutes_utils.clib)
  (include utils.clib)

  (defun-inline get-statutes-puzzle-hash (statutes_struct statutes_inner_puzzle_hash)
    (c
      (sha256tree statutes_struct)
      (calculate-statutes-puzzle-hash statutes_struct statutes_inner_puzzle_hash)
    )
  )

  (if delta
    (if (> 0 delta)
      ; melting only by surplus auction
      (assign
        (crt_tail_hash byc_tail_hash surplus_mod_hash
        launcher_id byc_lot_amount last_bid
        statutes_inner_puzzle_hash approved_mod_hashes) solution
        (statutes_struct_hash . statutes_puzzle_hash) (get-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
        puzzle_hash (
          curry_hashes CAT_MOD_HASH
            (sha256 ONE CAT_MOD_HASH)
            (sha256 ONE crt_tail_hash)
            (curry_hashes surplus_mod_hash
              (sha256 ONE surplus_mod_hash)
              (sha256 ONE CAT_MOD_HASH)
              statutes_struct_hash
              (sha256 ONE launcher_id)
              (sha256 ONE byc_lot_amount)
              (sha256 ONE byc_tail_hash)
              (sha256 ONE crt_tail_hash)
              (sha256tree last_bid)
            )
        )
        (assert
          (size_b32 crt_tail_hash)
          (size_b32 launcher_id)
          (size_b32 byc_tail_hash)
          (size_uint64 byc_lot_amount)
          (size_b32 surplus_mod_hash)
          ; can't melt a non-cat
          parent_is_cat
          ; must be a launched surplus auction
          launcher_id
          ; must have a lot to exchange for melting
          (> byc_lot_amount 0)
          ; should have a winning bid
          (> (f (r last_bid)) 0)
          ; surplus mod hash is the second in approved mod hash list
          (= surplus_mod_hash (f (r approved_mod_hashes)))
          (list
            ; if this is a surplus auction and it called for melting, melt
            (list ASSERT_MY_PUZZLEHASH puzzle_hash)
            ; we should be melting the whole coin value
            (list ASSERT_MY_AMOUNT (* -1 delta))
            (assert-statute statutes_puzzle_hash STATUTE_TREASURY_COIN_APPROVER_MOD_HASHES approved_mod_hashes)
          )
        )
      )
      ; no minting
      (x)
    )
    (if (= (my_parent_cat_truth Truths) GENESIS_ID)
      () ; issuance at launch
      ; third option is issuing by recharge auction or announcer registry
      (assign
        (
          mod_hash
          ann_prefix
          parent_id
          curried_mod_args
          byc_tail_hash
          amount
          issuance_amount
          my_coin_id
          approved_mod_hashes
          statutes_inner_puzzle_hash
        ) solution
        (statutes_struct_hash . statutes_puzzle_hash) (get-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
        approving_coin_id (calculate-coin-id
          parent_id
          (if (all byc_tail_hash (= mod_hash (f (r (r approved_mod_hashes)))))
            ; either a CAT puzzle with recharge auction as inner puzzle
            (curry_hashes CAT_MOD_HASH
              (sha256 ONE CAT_MOD_HASH)
              (sha256 ONE byc_tail_hash)
              (tree_hash_of_apply mod_hash curried_mod_args)
            )
            ; OR announcer registry
            (assert
              (= mod_hash (f (r (r (r (r approved_mod_hashes)))))) ; announcer registry
              (tree_hash_of_apply mod_hash curried_mod_args)
            )
          )
          amount
        )
        (assert
          ; recharge auction mod is the third in approved mod hash list
          ; can also be announcer registry
          (any (size_b32 byc_tail_hash) (not byc_tail_hash))
          (size_uint64 amount)
          (size_uint64 issuance_amount)
          (size_b32 my_coin_id)
          (size_b1 ann_prefix)
          (size_b32 curried_mod_args)
          (size_b32 approving_coin_id)
          (= delta 0)
          (list
            (list ASSERT_MY_COIN_ID my_coin_id)
            (list RECEIVE_MESSAGE
              0x3f
              (concat
                ann_prefix
                statutes_struct_hash
                my_coin_id
                issuance_amount
              )
              approving_coin_id
            )
            (list ASSERT_MY_AMOUNT issuance_amount)
            (assert-statute statutes_puzzle_hash STATUTE_TREASURY_COIN_APPROVER_MOD_HASHES approved_mod_hashes)
          )
        )
      )
    )
  )
)
