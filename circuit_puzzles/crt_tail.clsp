; Circuit CAT token (CRT) TAIL program
; CRT token is used for governance voting and can be used to bid in surplus auctions.
; CRT tokens are minted by the announcer registry and recharge auction(s).
; CRT tokens can be melted in surplus auctions.
(mod (
      GENESIS_ID STATUTES_STRUCT
      Truths parent_is_cat
      lineage_proof
      delta
      inner_conditions
      solution
     )

  (include *standard-cl-23.1*)
  (include condition_codes.clib)
  (include cat_truths.clib)
  (include curry.clib)
  (include utils.clib)
  (include statutes_utils.clib)
  (include condition_filtering.clib)

  (defun-inline get-statutes-puzzle-hash (statutes_struct statutes_inner_puzzle_hash)
    (c
      (sha256tree statutes_struct)
      (calculate-statutes-puzzle-hash statutes_struct statutes_inner_puzzle_hash)
    )
  )


  (if (= "x" (f solution))
    ; if melt prefix is set we must melt, ie delta must be positive
    (assert
      (> 0 delta) 
      (assign
        CAT_MOD_HASH (cat_mod_hash_truth Truths)
        CAT_MOD_HASH_HASH (cat_mod_hash_hash_truth Truths)
        (
          _
          crt_tail_hash
          byc_tail_hash
          surplus_mod_hash
          launcher_id
          byc_lot_amount
          last_bid
          statutes_inner_puzzle_hash
          approval_mod_hashes
        ) solution
        (statutes_struct_hash . statutes_puzzle_hash) (get-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
        puzzle_hash (
          ; this is a surplus auction puzzle hash
          curry_hashes CAT_MOD_HASH
            CAT_MOD_HASH_HASH
            (sha256 ONE crt_tail_hash)
            (curry_hashes surplus_mod_hash
              (sha256 ONE surplus_mod_hash)
              statutes_struct_hash
              (sha256 ONE byc_tail_hash)
              (sha256 ONE crt_tail_hash)
              (sha256 ONE launcher_id)
              (sha256 ONE byc_lot_amount)
              (sha256tree last_bid)
            )
        )
        (assert
          ; can't melt a non-cat
          parent_is_cat
          ; must be a launched surplus auction
          launcher_id
          ; must have a lot to exchange for melting itself
          (> byc_lot_amount 0)
          ; should have a winning bid, last_bid -> (bid_amount . crt_bid_amount)
          (> (r last_bid) 0)
          ; surplus mod hash is the second in approval mod hashes list
          (= surplus_mod_hash (f (r approval_mod_hashes)))
          (list
            ; if this is a surplus auction and it called for melting, melt
            (list ASSERT_MY_PUZZLE_HASH puzzle_hash)
            ; we should be melting the whole coin value
            (list ASSERT_MY_AMOUNT (* -1 delta))
            (assert-statute statutes_puzzle_hash STATUTE_APPROVAL_MOD_HASHES_HASH (sha256tree approval_mod_hashes))
          )
        )
      )
    )
    (assert
      ; if not melting, issuance prefix must be set
      (= "i" (f solution))
      (if (= (my_parent_cat_truth Truths) GENESIS_ID)
        (assert
          (= 0 delta) ; delta must be zero at TGE
          () ; issuance at launch of protocol
        )
        (assign ; issuing by recharge auction or announcer registry
          CAT_MOD_HASH (cat_mod_hash_truth Truths)
          CAT_MOD_HASH_HASH (cat_mod_hash_hash_truth Truths)
          crt_tail_hash (cat_tail_program_hash_truth Truths)
          (
            _
            mod_hash
            parent_id
            curried_mod_args
            byc_tail_hash
            amount
            issuance_amount
            approval_mod_hashes
            statutes_inner_puzzle_hash
            target_puzzle_hash  ; where this coin is going to
            run_tail_mod_hash
          ) solution
          (statutes_struct_hash . statutes_puzzle_hash) (get-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
          approver_coin_id (calculate-coin-id
            parent_id
            ; approval_mod_hashes is defined by statutes and we validate it by checking mod_hash is at the correct position
            (if (all byc_tail_hash (= mod_hash (f (r (r approval_mod_hashes)))))
              ; either a CAT puzzle with recharge auction as inner puzzle
              (curry_hashes CAT_MOD_HASH
                CAT_MOD_HASH_HASH
                (sha256 ONE byc_tail_hash)
                (tree_hash_of_apply mod_hash curried_mod_args)
              )
              ; OR announcer registry
              (assert
                (= mod_hash (f (r (r (r (r approval_mod_hashes)))))) ; announcer registry mod has position in approved hashes
                (tree_hash_of_apply mod_hash curried_mod_args)
              )
              ; NOTE: we're using tree_hash_of_apply to avoid including all arguments and then hashing it
              ; to generate the puzzle hash. This avoids a lot of costs since we don't need to pass them into
              ; the solution. We don't really care what the values are since these puzzles can only be launched
              ; by governance so they're trusted. We just need to make sure they have the correct mod_hash.
            )
            amount
          )
          curried_target_puzzle_hash (curry_hashes CAT_MOD_HASH
            CAT_MOD_HASH_HASH
            (sha256 ONE crt_tail_hash)
            target_puzzle_hash
          )
          (assert
            ; may not pass any conditions from inner puzzle to tail, but note that cat layer appends
            ; two default conditions (for purposes of CAT ring) to conditions from inner puzzle by default
            (not (r (r inner_conditions)))
            ; and delta must be negative (or 0) as no create coin conditions are passed from inner puzzle
            (> ONE delta)
            (list
              (list CREATE_COIN_ANNOUNCEMENT "$") ; for protocol external coins to assert issuance
              (list CREATE_COIN curried_target_puzzle_hash issuance_amount (list target_puzzle_hash))
              (list RECEIVE_MESSAGE 0x3f
                (concat
                  PROTOCOL_PREFIX
                  (sha256tree
                    (c STATUTES_STRUCT ; statutes_struct_hash
                      (c target_puzzle_hash issuance_amount) ; get approval for target puzzle hash and amount from approver
                    )
                  )
                )
                approver_coin_id
              )
              (list ASSERT_MY_PUZZLE_HASH
                (curry_hashes CAT_MOD_HASH
                  CAT_MOD_HASH_HASH
                  (sha256tree crt_tail_hash)
                  run_tail_mod_hash
                )
              )
              (list ASSERT_MY_AMOUNT issuance_amount)
              (assert-statute statutes_puzzle_hash STATUTE_APPROVAL_MOD_HASHES_HASH (sha256tree approval_mod_hashes))
              (assert-statute statutes_puzzle_hash STATUTE_RUN_TAIL_MOD_HASH run_tail_mod_hash)
            )
          )
        )
      )
    )
  )
)
