(mod (MOD_HASH STATUTES_STRUCT ATOM_ANNOUNCER_PUZZLE_HASH PRICES LAST_UPDATED
      ; solution
      (@ oracle_mutation
        (
          statutes_inner_puzzle_hash
          m_of_n
          price_updatable_after_seconds
          price_updatable_threshold_percent
          price_expiration_seconds
          announcer_delay
          announcer_deposit
          current_timestamp
          ; price_announcers -> ((inner_puzzle_hash args_hash price))
          price_announcers
        )
      )
      input_announcement_asserts
     )

  (include *standard-cl-23*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include utils.clib)


  (defun filter (pred (@ lst (first . rest)))
    (if lst
      (assign item (a pred (list first))
        (if item
          (c item (filter pred rest))
          (filter pred rest)
        )
      )
      ()
    )
  )

  (defun list-length (lst count)
    (if lst
      (list-length (r lst) (+ count 1))
      count
    )
  )

  (defun not-contains (lst item)
    (if lst
      (if (= (f (f lst)) item)
        (x "contained")
        (not-contains (r lst) item)
      )
      1
    )
  )

  (defun unique (lst)
    (if (r lst)
      (if (not-contains (r lst) (f (f lst)))
        (unique (r lst))
        (x "not unique")
      )
      1
    )
  )
(defun and_ (CLAUSES)
   (if (r CLAUSES)
     (qq (if (unquote (f CLAUSES)) (unquote (and_ (r CLAUSES))) ()))
     (f CLAUSES)
     )
   )

(defmac and CLAUSES (if CLAUSES (and_ CLAUSES) 1))

(defun or_ (CLAUSES)
   (if (r CLAUSES) ;; There are more.
     (qq (if (unquote (f CLAUSES)) (unquote (f CLAUSES)) (unquote (or_ (r CLAUSES)))))
     (f CLAUSES)
     )
   )

 (defmac or CLAUSES (if CLAUSES (or_ CLAUSES) ()))

(defun _reverse (L R)
  (if L
      (_reverse (r L) (c (f L) R))
    R))

(defun reverse (L)
  (_reverse L ()))

(defun-inline endp (L)
  (if (not L) 1 (if (not (r L)) 1 0)))

(defun _split (Z L R)
  (if (endp R)
      (list (reverse L) Z)
      (_split (r Z) (c (f Z) L) (r (r R))))
  )

(defun split (Z)
  (_split Z () Z))

(defun _merge (L R A)
  (if (and (not L) (not R)) (reverse A)
    (if (not L) (_merge () (r R) (c (f R) A))
      (if (not R) (_merge (r L) () (c (f L) A))
        (if (> (f R) (f L)) (_merge (r L) R (c (f L) A))
            (_merge L (r R) (c (f R) A)))))))

(defun merge (L R)
  (_merge L R ()))

; thanks @geoff for the mergesort implementation on https://aggsig.me/mergesort.html
(defun mergesort (Z)
  (if Z
      (if (r Z)
          (assign (L R) (split Z)
                  (merge (mergesort L) (mergesort R)))
        Z)
    ()))

  (defun sort-prices ((@ lst ((inner_puzzle_hash proof price) . rest)) price_list) 
    (if lst
      (sort-prices (r lst) (c price price_list))
      (mergesort price_list)
    )
  )


  (defun-inline get-median-index (length)
    ; if odd, we return the middle value
    ; if even, we return the one smaller since prices are sorted in descending order
    (/ length 2)
  )

  (defun get-price (prices index curr_index)
    (if prices
      (if (= index curr_index)
        (f prices)
        (get-price (r prices) index (+ curr_index 1))
      )
      (x "no price")
    )
  )

  (defun generate-ann-conditions (STATUTES_STRUCT ATOM_ANNOUNCER_PUZZLE_HASH DEPOSIT DELAY price_announcers)
    (if price_announcers
      (assign 
        announcer (f price_announcers)
        ; price_announcers -> ((inner_puzzle_hash_sha256 args_hash price))
        (inner_puzzle_hash args_hash price) announcer
        announcer_puzzle_hash (tree_hash_of_apply ATOM_ANNOUNCER_PUZZLE_HASH args_hash)
        ; we don't need to check before_timestamp since it's already checked in atom_announcer puzzle
        (c
          (list ASSERT_PUZZLE_ANNOUNCEMENT
            ; ONE value represents that announcer is enabled
            (sha256 announcer_puzzle_hash (sha256 (sha256tree STATUTES_STRUCT) inner_puzzle_hash ONE DEPOSIT DELAY price))
          )
          (c (list REMARK 'oracle receiving price ann=>' announcer_puzzle_hash (sha256tree STATUTES_STRUCT) inner_puzzle_hash ONE DEPOSIT DELAY price)
            (generate-ann-conditions STATUTES_STRUCT ATOM_ANNOUNCER_PUZZLE_HASH DEPOSIT DELAY (r price_announcers))
          )
        )
      )
      ()
    )
  )

  (defun print (to-show result) (if (all "$print$" to-show result) result result))

  (defun-inline abs (number)
    (if (> number -1) number (* number -1))
  )

  (defun cut-prices (price_list expiration_timestamp cut_price_list last_price)
    (if price_list
      (if (> (r (f price_list)) expiration_timestamp)
        (cut-prices (r price_list) expiration_timestamp (c (f price_list) cut_price_list) (f price_list))
        (c cut_price_list (if last_price last_price (c -1 -1)))
      )
      (c cut_price_list (if last_price last_price (c -1 -1)))
    )
  )

  (defun verify-announcement-asserts (input_announcement_asserts conditions)
    (if input_announcement_asserts
      (if
        (any
          (= (f (f input_announcement_asserts)) ASSERT_COIN_ANNOUNCEMENT)
          ; we only use puzzle announcements, so coin announcements are fine
          (= (f (f input_announcement_asserts)) CREATE_COIN_ANNOUNCEMENT)
        )
        (verify-announcement-asserts (r input_announcement_asserts) (c (f input_announcement_asserts) conditions))
        (x "bad announcement:" (f (f input_announcement_asserts)))
      )
      conditions
    )
  )

  ; ###################### MAIN ############################
  
  (if oracle_mutation
    (assign
      price_announcers_length (if oracle_mutation (list-length price_announcers 0) ())
      statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
      sorted_prices (sort-prices price_announcers ())
      ; get median price, divide length by 2 and add 1 to get the middle when length is even
      mean_price (get-price sorted_prices (get-median-index price_announcers_length) 0)
      announcer_conditions (generate-ann-conditions
        STATUTES_STRUCT
        ATOM_ANNOUNCER_PUZZLE_HASH
        announcer_deposit
        announcer_delay
        price_announcers
      )
      (new_prices . last_price_info) (cut-prices PRICES (- current_timestamp price_expiration_seconds) (list (c mean_price current_timestamp)) ())
      (last_price . last_updated) last_price_info
      ;  new coin will have updated price, increase the counter of updates
      ;###  main expression
      ; check that we haven't updated the price recently OR new price is much higher than previous
      (assert_debug
        (> price_announcers_length (- m_of_n 1))
        ; check that prices are unique
        (unique price_announcers)
        (> current_timestamp LAST_UPDATED)
        (any
          (> (- current_timestamp LAST_UPDATED ) price_updatable_after_seconds)
          (if (> last_price 0)
            (> (abs (/ (* (- last_price mean_price) PERCENT_PRECISION) last_price) ) price_updatable_threshold_percent)
            ; no prices in buffer, update now
            1
          )
        )
        ; should be confirmed at least within 5 blocks since it was pushed to mempool
        (c (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp MAX_TX_BLOCK_TIME ))
          ; current_timestamp - 1 min should've passed already too, this is to ensure current timestamp is
          ; within a boundary of last_block > current_timestamp - 1 block < next block
          (c (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp MAX_TX_BLOCK_TIME))
            (c (assert-statute statutes_puzzle_hash STATUTE_ORACLE_M_OF_N m_of_n)
              (c (assert-statute statutes_puzzle_hash STATUTE_ORACLE_PRICE_UPDATABLE_AFTER_SECONDS price_updatable_after_seconds)
                (c (assert-statute statutes_puzzle_hash STATUTE_ORACLE_PRICE_UPDATABLE_PERCENT_THRESHOLD price_updatable_threshold_percent)
                  (c (assert-statute statutes_puzzle_hash STATUTE_ANNOUNCER_DELAY announcer_delay)
                    (c (assert-statute statutes_puzzle_hash STATUTE_ANNOUNCER_MIN_DEPOSIT announcer_deposit)
                      (c (assert-statute statutes_puzzle_hash STATUTE_ORACLE_PRICE_EXPIRATION_SECONDS price_expiration_seconds)
                        (c (list CREATE_PUZZLE_ANNOUNCEMENT (if (> last_price -1) (sha256 last_price last_updated) (sha256 mean_price current_timestamp)))
                          (c
                            (list
                              CREATE_COIN
                              (curry_hashes MOD_HASH
                                (sha256tree MOD_HASH)
                                (sha256tree STATUTES_STRUCT)
                                (sha256tree ATOM_ANNOUNCER_PUZZLE_HASH)
                                (sha256tree new_prices)
                                (sha256tree current_timestamp)
                              )
                              ; min singleton amount, force it to be ONE
                              1
                            )
                            (c
                              (list REMARK new_prices mean_price last_price current_timestamp)
                              (verify-announcement-asserts input_announcement_asserts announcer_conditions)
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
    ; no updates, just assert and announce
    ; recreate yourself to conserve updates so far
    (verify-announcement-asserts
      input_announcement_asserts
      (list
        (list CREATE_COIN
          (curry_hashes MOD_HASH
              (sha256tree MOD_HASH)
              (sha256tree STATUTES_STRUCT)
              (sha256tree ATOM_ANNOUNCER_PUZZLE_HASH)
              (sha256tree PRICES)
              (sha256tree LAST_UPDATED)
          )
          ; min singleton amount, force it to be this
          1
        )
        (assign
          (last_price . last_updated) (r (cut-prices PRICES 0 () ()))
          (list CREATE_PUZZLE_ANNOUNCEMENT (sha256 last_price last_updated))
        )
      )
    )
  )
)
