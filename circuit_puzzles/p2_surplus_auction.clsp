;;; this coin is controlled by the surplus auction coin, and is used to transfer funds to the winner of the surplus auction
; coin is created with zero amount, and when it's first spent it's filled with the lot amount and puzzle hash
; if the coin is spent again, it's transferred to the winner of the surplus auction
; every spend needs to be approved by the surplus auction coin
(mod (MOD_HASH
      CAT_MOD_HASH CRT_TAIL_HASH SURPLUS_AUCTION_MOD_HASH ; TODO: can move these three before MOD_HASH as immutable
      SURPLUS_AUCTION_LAUNCHER_ID
      surplus_auction_parent_id
      surplus_auction_curried_args_hash
      my_coin_id
      puzzle_hash
      amount
     )

  (include *standard-cl-23*)
  (include curry.clib)
  (include condition_codes.clib)
  (include utils.clib)

  (assign
    surplus_auction_coin_id (assert
      (size_b32 surplus_auction_curried_args_hash)
      (calculate-coin-id
        surplus_auction_parent_id
        (curry_hashes CAT_MOD_HASH
          (sha256 ONE CAT_MOD_HASH)
          (sha256 ONE CRT_TAIL_HASH)
          ; we're asserting that launcher coin must be using surplus puzzle so we can trust its announcements
          (tree_hash_of_apply SURPLUS_AUCTION_MOD_HASH surplus_auction_curried_args_hash)
        )
        0 ; surplus auction coins have enforced amount of 0
      )
    )
    (if (all (= surplus_auction_coin_id SURPLUS_AUCTION_LAUNCHER_ID) (= puzzle_hash ()))
      ; first spend of the coin
      (list  ; create / fill the coin from treasury
        ; surplus auction is being created and started, since we should have enough in treasury
        ; to fill this coin, let see. We also guarantee we locked them delegating control to launcher coin id,
        ; which ensures (in start auction spend) that amount equals Surplus Auction Lot Amount
        (list SEND_MESSAGE 0x3f (concat PROTOCOL_PREFIX my_coin_id amount puzzle_hash) surplus_auction_coin_id) ; TODO: protocol prefix not needed?
        ; recreate ourselves with the surplus auction lot amount
        (list
          CREATE_COIN
          (curry_hashes
            MOD_HASH
            (sha256 ONE MOD_HASH)
            (sha256 ONE CAT_MOD_HASH)
            (sha256 ONE CRT_TAIL_HASH)
            (sha256 ONE SURPLUS_AUCTION_MOD_HASH)
            (sha256 ONE SURPLUS_AUCTION_LAUNCHER_ID)
          )
          amount
        )
        (list ASSERT_MY_COIN_ID my_coin_id)
        ; must be zero when locking the coin
        ; also ensures this spend path can only be taken once since Surplus Auction Lot Amount > 0 (or o/w there's no possibility of loss to protocol)
        (list ASSERT_MY_AMOUNT 0)
      )
      ; we're transferring funds to surplus auction winner,
      ; we don't know if recent surplus coin contains our launcher id, but we're going to assert that with coin ann
      (list
        ; can only transfer full amount
        (list ASSERT_MY_AMOUNT amount)
        ; get confirmation from surplus auction that it indeed wants to transfer funds to the winner (puzzle_hash)
        ; and the winning bid amount to melt
        (list RECEIVE_MESSAGE 0x3f (concat PROTOCOL_PREFIX amount puzzle_hash) surplus_auction_coin_id) ; TODO: protocol prefix not needed?
        ; transfer out
        (list CREATE_COIN puzzle_hash amount)
      )
    )
  )
)
