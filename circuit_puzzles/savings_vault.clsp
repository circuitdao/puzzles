;;; Savings vault for BYC, this is an inner BYC CAT puzzle
(mod (MOD_HASH CAT_MOD_HASH CAT_TAIL_HASH STATUTES_STRUCT DISCOUNTED_DEPOSIT INNER_PUZZLE
      lineage_proof
      statutes_inner_puzzle_hash
      current_amount
      my_coin_id
      statutes_cumulative_interest_df current_timestamp current_interest_df price_info minimum_interest_amount
      inner_solution
      .
      (@ treasury_coin_info ((p2_treasury_hash treasury_coin_parent_id treasury_coin_launcher_id
                             treasury_coin_prev_launcher_id treasury_coin_amount )))
     )

  (include *standard-cl-23*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include utils.clib)

  (defconst ANN_PREFIX 0x53) ; chr(83) -> "S"

  (defun filter-conditions ((@ conditions ( (condition_code . condition_rest) . rest_of_conditions))
                            found_first_create_coin
                            filtered_conditions)
    (if conditions
      (if (any (= condition_code SEND_MESSAGE) (= condition_code RECEIVE_MESSAGE))
        (x)
        (if (= condition_code CREATE_COIN)
          (if found_first_create_coin
            (filter-conditions
              rest_of_conditions
              found_first_create_coin
              (c (f conditions) filtered_conditions)
            )
            (filter-conditions
              rest_of_conditions
              condition_rest ; first create coin condition
              ; skip this condition so we can add it later
              filtered_conditions
            )
          )
          (if (= condition_code REMARK)
            ; skip REMARK conditions since we use them to generate reveals
            (filter-conditions
              rest_of_conditions
              found_first_create_coin
              filtered_conditions
            )
            (filter-conditions
              rest_of_conditions
              found_first_create_coin
              (c (f conditions) filtered_conditions)
            )
          )
        )
      )
      (assert found_first_create_coin
        (list found_first_create_coin filtered_conditions)
      )
    )
  )

  (defun-inline calculate-interest (discounted_deposit principal cumulative_interest_df)
    (- (/ (* discounted_deposit cumulative_interest_df) PRECISION) principal)
  )

  (assign
    statutes_struct_hash (sha256tree STATUTES_STRUCT)
    statutes_puzzle_hash (calculate-statutes-puzzle-hash (c (f STATUTES_STRUCT) statutes_struct_hash) statutes_inner_puzzle_hash)
    cumulative_deposit_interest_df (calculate-cumulative-discount-factor
      statutes_cumulative_interest_df
      current_interest_df
      current_timestamp
      (r price_info)
    )
    (create_coin_body conditions) (filter-conditions
      (a INNER_PUZZLE inner_solution)
      0 ; found first coin set to false
      ()
    )
    interest_amount (if treasury_coin_info
      (calculate-interest
        DISCOUNTED_DEPOSIT
        current_amount
        (calculate-cumulative-discount-factor ; cumulative withdrawal interest
          statutes_cumulative_interest_df
          current_interest_df
          (- current_timestamp (* 3 MAX_TX_BLOCK_TIME)) ; avoid future interest
          (r price_info)
        )
      )
      0
    )
    new_amount (f (r create_coin_body))
    delta_amount (- new_amount current_amount)
    new_discounted_deposit (if treasury_coin_info
      ; discount with interest
      (+ (/ (* (- delta_amount interest_amount) PRECISION) cumulative_deposit_interest_df) DISCOUNTED_DEPOSIT)
      (+ (/ (* delta_amount PRECISION) cumulative_deposit_interest_df) DISCOUNTED_DEPOSIT)
    )
    treasury_coin_id (if treasury_coin_info
      (calculate-coin-id
        treasury_coin_parent_id
        (curry_hashes CAT_MOD_HASH
          (sha256 ONE CAT_MOD_HASH)
          (sha256 ONE CAT_TAIL_HASH)
          (curry_hashes p2_treasury_hash
            (sha256 ONE p2_treasury_hash)
            (sha256 ONE CAT_MOD_HASH)
            (sha256 ONE CAT_TAIL_HASH)
            statutes_struct_hash
            (sha256 ONE treasury_coin_prev_launcher_id)
            (sha256 ONE treasury_coin_launcher_id)
          )
        )
        treasury_coin_amount
      )
      ()
    )
    new_treasury_amount (if treasury_coin_id (- treasury_coin_amount interest_amount) 0)
    pre_final_conditions (if lineage_proof
      ; lineage_proof -> (parent_id, amount, discounted_deposit, inner_puzzle_hash)
      (c
        (list ASSERT_MY_PARENT_ID
          (calculate-coin-id
            (f lineage_proof)
            (curry_hashes CAT_MOD_HASH
              (sha256 ONE CAT_MOD_HASH)
              (sha256 ONE CAT_TAIL_HASH)
              (curry_hashes MOD_HASH
                (sha256 ONE MOD_HASH)
                (sha256 ONE CAT_MOD_HASH)
                (sha256 ONE CAT_TAIL_HASH)
                statutes_struct_hash
                (sha256 ONE (f (r (r lineage_proof)))) ; discounted deposit
                (f (r (r (r lineage_proof)))) ; inner puzzle hash
              )
            )
            (f (r lineage_proof)) ; amount
          )
        )
        conditions
      )
      ; this is a launch, verify we're starting with zero amounts
      (c
        (list ASSERT_MY_PUZZLEHASH
          (curry_hashes CAT_MOD_HASH
            (sha256 ONE CAT_MOD_HASH)
            (sha256 ONE CAT_TAIL_HASH)
            (curry_hashes MOD_HASH
              (sha256 ONE MOD_HASH)
              (sha256 ONE CAT_MOD_HASH)
              (sha256 ONE CAT_TAIL_HASH)
              statutes_struct_hash
              (sha256 ONE 0)
              (sha256tree INNER_PUZZLE)
            )
          )
        )
        (assert (= current_amount 0) ; current amount must be 0 when launching
          conditions
        )
      )
    )
    final_conditions (if treasury_coin_info
      ; check p2_treasury_hash was approved by statutes, this also verifies the cat tail hash
      (c
        (assert-statute statutes_puzzle_hash STATUTE_P2_TREASURY_MOD_HASH p2_treasury_hash)
        pre_final_conditions
      )
      pre_final_conditions
    )
    inner_puzzle_hash (f create_coin_body)
    memos (r (r create_coin_body))

    (assert
      (> interest_amount -1)
      (size_b32 inner_puzzle_hash)
      (li
        (list REMARK new_discounted_deposit new_amount inner_puzzle_hash memos)
        (list ASSERT_MY_COIN_ID my_coin_id)
        (list ASSERT_MY_AMOUNT current_amount)
        (assert-statute statutes_puzzle_hash STATUTE_CUMULATIVE_INTEREST_DF statutes_cumulative_interest_df)
        (assert-statute statutes_puzzle_hash STATUTE_INTEREST_DF current_interest_df)
        (assert-price-info statutes_puzzle_hash price_info)
        (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp MAX_TX_BLOCK_TIME))
        (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp MAX_TX_BLOCK_TIME))
        (c CREATE_COIN ; constructing CREATE_COIN so we can prepend to whatever memos we got
          (c
            (curry_hashes MOD_HASH ; puzzle hash
              (sha256 ONE MOD_HASH)
              (sha256 ONE CAT_MOD_HASH)
              (sha256 ONE CAT_TAIL_HASH)
              statutes_struct_hash
              (sha256 ONE new_discounted_deposit)
              inner_puzzle_hash
            )
            (c new_amount
              memos
            )
          )
        )
        &rest
        (if treasury_coin_id
          (assert
            ; treasury coin should have enough amount to cover interest
            (> new_treasury_amount interest_amount)
            ; we limit the amount of interest to the treasury coin amount to avoid dusting the treasury coins
            (> interest_amount minimum_interest_amount)
            (c
              (assert-statute statutes_puzzle_hash STATUTE_SAVINGS_MINIMUM_INTEREST_AMOUNT_TO_WITHDRAW minimum_interest_amount)
              (c
                (list SEND_MESSAGE 0x3f
                  (concat ANN_PREFIX treasury_coin_id (* -1 interest_amount) new_treasury_amount)
                  treasury_coin_id
                )
                final_conditions
              )
            )
          )
          ; return conditions as in, we assume driver is handling withdrawals and announcements properly
          final_conditions
        )
      )
    )
  )
)