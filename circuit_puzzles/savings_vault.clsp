;;; Savings vault for BYC, this is a inner BYC CAT puzzle
;       collateral vaults and new treasury coin puzzle
(mod (MOD_HASH CAT_MOD_HASH CAT_TAIL_HASH STATUTES_STRUCT DISCOUNTED_DEPOSIT INNER_PUZZLE
      lineage_proof
      statutes_inner_puzzle_hash
      current_amount
      my_coin_id
      statutes_cumulative_interest_rate current_timestamp current_interest_rate price_info
      inner_solution
      .
      (@ treasury_coin_info ((p2_treasury_hash treasury_coin_parent_id treasury_coin_launcher_id
                             treasury_coin_prev_launcher_id treasury_coin_amount minimum_interest_amount))) ; REVIEW: is there a reason this is a list of a list?
     )

  (include *standard-cl-23*)
  (include curry.clib)
  (include condition_codes.clib)
  (include statutes_utils.clib)
  (include utils.clib)

  (defconstant ANN_PREFIX 0x53) ; chr(83) -> "S"
  (defconstant BYC_ANN_PREFIX 0x42) ; chr(66) -> "B" ; REVIEW: not used anywhere
  (defconstant TREASURY_ANN_PREFIX 0x24) ; -> '$'
  (defconstant MOJOS 1000000000000) ; REVIEW: not used anywhere
  (defconstant PERCENT_PRECISION 10000) ; REVIEW: not used in this mod, but encountered elsewhere (collateral vault?)
  (defconstant PRECISION 10000000000)


  ; REVIEW: rename rate -> discount factor (in function & variable names) throughout
  ; REVIEW: move to a .clib file and use for both savings interest and stability fee calculations
  (defun calculate-cumulative-interest-rate
      (past_cumulative_interest_rate
       current_interest_rate
       current_timestamp
       previous_timestamp
      )
    (if (> previous_timestamp current_timestamp)
      past_cumulative_interest_rate
      (calculate-cumulative-interest-rate
        (/ (* past_cumulative_interest_rate current_interest_rate) PRECISION)
        current_interest_rate
        current_timestamp
        ; per minute calculation
        (+ previous_timestamp 60)
      )
    )
  )

  ; REVIEW: remove generate-puzzle-hash argument. not used by filter-conditions
  (defun filter-conditions (generate-puzzle-hash
                            (@ conditions ( (condition_code . condition_rest) . rest_of_conditions))
                            found_first_create_coin
                            delta_amount
                            filtered_conditions)
    (if conditions
      (if (any (= condition_code CREATE_PUZZLE_ANNOUNCEMENT) (= condition_code CREATE_COIN_ANNOUNCEMENT))
        (if (not
              (= (substr (f condition_rest) 0 1) ANN_PREFIX)
            )
          (filter-conditions
            generate-puzzle-hash
            rest_of_conditions
            found_first_create_coin
            delta_amount
            (c (f conditions) filtered_conditions)
          )
          ; bad announcement found, error
          (x)
        )
        (if (= condition_code CREATE_COIN)
          (if found_first_create_coin
            (filter-conditions
              generate-puzzle-hash
              rest_of_conditions
              found_first_create_coin
              ; subtract amount from create coin condition if we have additional create coin conditions
              (- delta_amount (f (r condition_rest)))
              (c (f conditions) filtered_conditions)
            )
            (filter-conditions
              generate-puzzle-hash
              rest_of_conditions
              condition_rest ; first create coin condition
              0 ;(+ delta_amount (f (r condition_rest))) ; passed in delta amount, in case there's a deposit, this is > 0; REVIEW: delete comment to left as no longer valid? delta_amount is used solely for internal accounting purposes, and should always be set to 0 when calling filter-conditions externally.
              ; skip this condition so we can add it later
              filtered_conditions
            )
          )
          (if (= condition_code REMARK)
            ; skip REMARK conditions since we use them to generate reveals
            (filter-conditions
              generate-puzzle-hash
              rest_of_conditions
              found_first_create_coin
              delta_amount
              filtered_conditions
            )
            (filter-conditions
              generate-puzzle-hash
              rest_of_conditions
              found_first_create_coin
              delta_amount
              (c (f conditions) filtered_conditions)
            )
          )
        )
      )
      (assert found_first_create_coin
        (list found_first_create_coin delta_amount filtered_conditions)
      )
    )
  )

  (defun-inline calculate-interest (discounted_deposit principal cumulative_interest_rate)
    (assign
      value (- (/ (* discounted_deposit cumulative_interest_rate) PRECISION) principal)
      (if (> value -1)
        value
        0
      )
    )
  )

  (assign
    ; REVIEW: no need to define generate-puzzle-hash function as it's only used once further below where we have access to state variables
    ;  Note: it's an unnecessary argument to filter-conditions and can be removed from that function signature
    generate-puzzle-hash (lambda ((& MOD_HASH CAT_MOD_HASH CAT_TAIL_HASH STATUTES_STRUCT)
                                     discounted_deposit inner_puzzle_hash)
      ; only inner puzzle
      (curry_hashes MOD_HASH ; puzzle hash
        (sha256tree MOD_HASH)
        (sha256tree CAT_MOD_HASH)
        (sha256tree CAT_TAIL_HASH)
        (sha256tree STATUTES_STRUCT)
        (sha256tree discounted_deposit)
        inner_puzzle_hash
      )
    )
    cumulative_interest_rate (calculate-cumulative-interest-rate
      statutes_cumulative_interest_rate
      current_interest_rate
      current_timestamp
      (f (r price_info)) ; REVIEW: this requires price_info to be a list rather than struct in Statutes. verify that that's the case as oracle is using a struct.
    )
    statutes_puzzle_hash (calculate-statutes-puzzle-hash STATUTES_STRUCT statutes_inner_puzzle_hash)
    (create_coin_body withdraw_amount conditions) (filter-conditions ; REVIEW: withdraw_amount not used anywhere. remove or assert vs delta_amount?
      generate-puzzle-hash
      (a INNER_PUZZLE inner_solution)
      0 ; found first coin
      0 ; delta amount
      ()
    )
    interest_amount (if treasury_coin_info
      (calculate-interest DISCOUNTED_DEPOSIT current_amount cumulative_interest_rate)
      0
    )
    new_amount (f (r create_coin_body))
    delta_amount (- new_amount current_amount)
    new_discounted_deposit (if treasury_coin_info
      ; discount with interest
      (+ (/ (* (- delta_amount interest_amount) PRECISION) cumulative_interest_rate) DISCOUNTED_DEPOSIT)
      (+ (/ (* delta_amount PRECISION) cumulative_interest_rate) DISCOUNTED_DEPOSIT)
    )

    ; REVIEW: do we need the individual state variables or would a (partial) hash do?
    treasury_coin_id (if treasury_coin_info
      (calculate-coin-id
        treasury_coin_parent_id
        (curry_hashes CAT_MOD_HASH
          (sha256tree CAT_MOD_HASH)
          (sha256tree CAT_TAIL_HASH)
          (curry_hashes p2_treasury_hash
            (sha256tree p2_treasury_hash)
            (sha256tree CAT_MOD_HASH)
            (sha256tree CAT_TAIL_HASH)
            (sha256tree STATUTES_STRUCT)
            (sha256tree treasury_coin_prev_launcher_id)
            (sha256tree treasury_coin_launcher_id)
          )
        )
        treasury_coin_amount
      )
      ()
    )
    new_treasury_amount (if treasury_coin_id (- treasury_coin_amount interest_amount) 0)
    pre_final_conditions (if lineage_proof
      ; lineage_proof -> (parent_id, amount, discounted_deposit, inner_puzzle_hash)
      (c
        (list ASSERT_MY_PARENT_ID
          (calculate-coin-id
            (f lineage_proof)
            (curry_hashes CAT_MOD_HASH
              (sha256tree CAT_MOD_HASH)
              (sha256tree CAT_TAIL_HASH)
              (curry_hashes MOD_HASH
                (sha256tree MOD_HASH)
                (sha256tree CAT_MOD_HASH)
                (sha256tree CAT_TAIL_HASH)
                (sha256tree STATUTES_STRUCT)
                (sha256tree (f (r (r lineage_proof)))) ; discounted deposit
                (f (r (r (r lineage_proof)))) ; inner puzzle hash
              )
            )
            (f (r lineage_proof)) ; amount
          )
        )
        conditions
      )
      ; this is a launch, verify we're starting with zero amounts
      ; REVIEW: do we want to make eve state unattainable?
      (c
        (list ASSERT_MY_PUZZLEHASH
          (curry_hashes CAT_MOD_HASH
            (sha256tree CAT_MOD_HASH)
            (sha256tree CAT_TAIL_HASH)
            (curry_hashes MOD_HASH
              (sha256tree MOD_HASH)
              (sha256tree CAT_MOD_HASH)
              (sha256tree CAT_TAIL_HASH)
              (sha256tree STATUTES_STRUCT)
              (sha256tree 0)
              (sha256tree INNER_PUZZLE)
            )
          )
        )
        (assert (= current_amount 0) ; current amount must be 0 when launching
          conditions
        )
      )
    )
    final_conditions (if treasury_coin_info
      ; check p2_treasury_hash was approved by statutes, this also verifies the cat tail hash
      (c
        (assert-statute statutes_puzzle_hash STATUTE_P2_TREASURY_MOD_HASH p2_treasury_hash)
        pre_final_conditions
      )
      pre_final_conditions
    )
    (c (list REMARK new_discounted_deposit new_amount (f create_coin_body) (r (r create_coin_body))) ; REVIEW: is this condition needed?
      (c
        (list ASSERT_MY_COIN_ID my_coin_id)
        (c
          (list ASSERT_MY_AMOUNT current_amount)
          (c
            (assert-statute statutes_puzzle_hash STATUTE_CUMULATIVE_INTEREST_RATE statutes_cumulative_interest_rate)
            (c
              (assert-statute statutes_puzzle_hash STATUTE_INTEREST_RATE current_interest_rate)
              (c
                (assert-price statutes_puzzle_hash 0 price_info) ; REVIEW: 2nd arg (0) is ORACLE_ID, which is no longer needed
                (c
                  (list ASSERT_SECONDS_ABSOLUTE (- current_timestamp 60))
                  (c
                    (list ASSERT_BEFORE_SECONDS_ABSOLUTE (+ current_timestamp 120))
                    (c
                      (c CREATE_COIN ; constructing CREATE_COIN so we can prepend to whatever memos we got
                        (c
                          ; REVIEW: no need for generate-puzzle-hash function. can construct puzzle hash directly
                          (a generate-puzzle-hash
                            (list
                              new_discounted_deposit
                              ; puzzle hash provided in the solution
                              (f create_coin_body)
                            )
                          )
                          (c new_amount
                            (r (r create_coin_body)) ; memos
                          )
                        )
                      )
                      (if treasury_coin_id
                        (assert
                          ; treasury coin should have enough amount to cover interest
                          (> new_treasury_amount 0)
                          ; we limit the amount of interest to the treasury coin amount to avoid dusting the treasury coins
                          (> interest_amount minimum_interest_amount)
                          (c
                            (assert-statute statutes_puzzle_hash STATUTE_SAVINGS_MINIMUM_INTEREST_AMOUNT_TO_WITHDRAW minimum_interest_amount)
                            (c
                              (list CREATE_COIN_ANNOUNCEMENT
                                (concat ANN_PREFIX treasury_coin_id (* -1 interest_amount) new_treasury_amount)
                              )
                              (c
                                (list ASSERT_COIN_ANNOUNCEMENT
                                  (sha256
                                    treasury_coin_id
                                    TREASURY_ANN_PREFIX
                                    my_coin_id
                                    (* -1 interest_amount)
                                    new_treasury_amount
                                  )
                                )
                                final_conditions
                              )
                            )
                          )
                        )
                        ; return conditions as in, we assume driver is handling withdrawals and announcements properly
                        final_conditions
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)